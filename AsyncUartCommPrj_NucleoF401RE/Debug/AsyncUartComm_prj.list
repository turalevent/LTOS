
AsyncUartComm_prj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ddc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002f74  08002f74  00012f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f9c  08002f9c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fa4  08002fa4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fa4  08002fa4  00012fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fa8  08002fa8  00012fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08002fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000090  08003038  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08003038  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f767  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a79  00000000  00000000  0002f823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  000322a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000848  00000000  00000000  00032c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000134e1  00000000  00000000  00033468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a788  00000000  00000000  00046949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065091  00000000  00000000  000510d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b6162  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f4  00000000  00000000  000b61b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002f5c 	.word	0x08002f5c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08002f5c 	.word	0x08002f5c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80004da:	4a0c      	ldr	r2, [pc, #48]	; (800050c <LL_DMA_EnableStream+0x3c>)
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	4413      	add	r3, r2
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	461a      	mov	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4413      	add	r3, r2
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4908      	ldr	r1, [pc, #32]	; (800050c <LL_DMA_EnableStream+0x3c>)
 80004ec:	683a      	ldr	r2, [r7, #0]
 80004ee:	440a      	add	r2, r1
 80004f0:	7812      	ldrb	r2, [r2, #0]
 80004f2:	4611      	mov	r1, r2
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	440a      	add	r2, r1
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	08002f74 	.word	0x08002f74

08000510 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800051a:	4a0c      	ldr	r2, [pc, #48]	; (800054c <LL_DMA_DisableStream+0x3c>)
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	4413      	add	r3, r2
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	461a      	mov	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4413      	add	r3, r2
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4908      	ldr	r1, [pc, #32]	; (800054c <LL_DMA_DisableStream+0x3c>)
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	440a      	add	r2, r1
 8000530:	7812      	ldrb	r2, [r2, #0]
 8000532:	4611      	mov	r1, r2
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	440a      	add	r2, r1
 8000538:	f023 0301 	bic.w	r3, r3, #1
 800053c:	6013      	str	r3, [r2, #0]
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	08002f74 	.word	0x08002f74

08000550 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800055c:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <LL_DMA_SetDataLength+0x44>)
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	4413      	add	r3, r2
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	0c1b      	lsrs	r3, r3, #16
 800056e:	041b      	lsls	r3, r3, #16
 8000570:	4908      	ldr	r1, [pc, #32]	; (8000594 <LL_DMA_SetDataLength+0x44>)
 8000572:	68ba      	ldr	r2, [r7, #8]
 8000574:	440a      	add	r2, r1
 8000576:	7812      	ldrb	r2, [r2, #0]
 8000578:	4611      	mov	r1, r2
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	440a      	add	r2, r1
 800057e:	4611      	mov	r1, r2
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	4313      	orrs	r3, r2
 8000584:	604b      	str	r3, [r1, #4]
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	08002f74 	.word	0x08002f74

08000598 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
 80005a4:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80005a6:	69bb      	ldr	r3, [r7, #24]
 80005a8:	2b40      	cmp	r3, #64	; 0x40
 80005aa:	d114      	bne.n	80005d6 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 80005ac:	4a17      	ldr	r2, [pc, #92]	; (800060c <LL_DMA_ConfigAddresses+0x74>)
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4413      	add	r3, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	4413      	add	r3, r2
 80005ba:	461a      	mov	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 80005c0:	4a12      	ldr	r2, [pc, #72]	; (800060c <LL_DMA_ConfigAddresses+0x74>)
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4413      	add	r3, r2
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	4413      	add	r3, r2
 80005ce:	461a      	mov	r2, r3
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 80005d4:	e013      	b.n	80005fe <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 80005d6:	4a0d      	ldr	r2, [pc, #52]	; (800060c <LL_DMA_ConfigAddresses+0x74>)
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	4413      	add	r3, r2
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	461a      	mov	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 80005ea:	4a08      	ldr	r2, [pc, #32]	; (800060c <LL_DMA_ConfigAddresses+0x74>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4413      	add	r3, r2
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4413      	add	r3, r2
 80005f8:	461a      	mov	r2, r3
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	60d3      	str	r3, [r2, #12]
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	08002f74 	.word	0x08002f74

08000610 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll HIFCR  CTCIF6    LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800061e:	60da      	str	r2, [r3, #12]
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000636:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <LL_DMA_EnableIT_TC+0x3c>)
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	4413      	add	r3, r2
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4413      	add	r3, r2
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4908      	ldr	r1, [pc, #32]	; (8000668 <LL_DMA_EnableIT_TC+0x3c>)
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	440a      	add	r2, r1
 800064c:	7812      	ldrb	r2, [r2, #0]
 800064e:	4611      	mov	r1, r2
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	440a      	add	r2, r1
 8000654:	f043 0310 	orr.w	r3, r3, #16
 8000658:	6013      	str	r3, [r2, #0]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	08002f74 	.word	0x08002f74

0800066c <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 800066c:	b480      	push	{r7}
 800066e:	b089      	sub	sp, #36	; 0x24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3314      	adds	r3, #20
 8000678:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	e853 3f00 	ldrex	r3, [r3]
 8000680:	60bb      	str	r3, [r7, #8]
   return(result);
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000688:	61fb      	str	r3, [r7, #28]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3314      	adds	r3, #20
 800068e:	69fa      	ldr	r2, [r7, #28]
 8000690:	61ba      	str	r2, [r7, #24]
 8000692:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000694:	6979      	ldr	r1, [r7, #20]
 8000696:	69ba      	ldr	r2, [r7, #24]
 8000698:	e841 2300 	strex	r3, r2, [r1]
 800069c:	613b      	str	r3, [r7, #16]
   return(result);
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1e7      	bne.n	8000674 <LL_USART_EnableDMAReq_TX+0x8>
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	3724      	adds	r7, #36	; 0x24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 80006b2:	b480      	push	{r7}
 80006b4:	b083      	sub	sp, #12
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3304      	adds	r3, #4
}
 80006be:	4618      	mov	r0, r3
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80006ca:	b480      	push	{r7}
 80006cc:	b083      	sub	sp, #12
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	b2db      	uxtb	r3, r3
}
 80006d8:	4618      	mov	r0, r3
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <initASC>:
  * @brief  init Async. Comm. module
  * @param  None
  * @retval None
  */
void initASC(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af02      	add	r7, sp, #8
	LL_DMA_DisableStream(ASC_UA_DMA, ASC_UA_DMA_TX_STR);
 80006ea:	2106      	movs	r1, #6
 80006ec:	4813      	ldr	r0, [pc, #76]	; (800073c <initASC+0x58>)
 80006ee:	f7ff ff0f 	bl	8000510 <LL_DMA_DisableStream>
	LL_DMA_ConfigAddresses(ASC_UA_DMA, ASC_UA_DMA_TX_STR, (uint32_t)ascTxBuf, LL_USART_DMA_GetRegAddr(ASC_USART), LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80006f2:	4c13      	ldr	r4, [pc, #76]	; (8000740 <initASC+0x5c>)
 80006f4:	4813      	ldr	r0, [pc, #76]	; (8000744 <initASC+0x60>)
 80006f6:	f7ff ffdc 	bl	80006b2 <LL_USART_DMA_GetRegAddr>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2240      	movs	r2, #64	; 0x40
 80006fe:	9200      	str	r2, [sp, #0]
 8000700:	4622      	mov	r2, r4
 8000702:	2106      	movs	r1, #6
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <initASC+0x58>)
 8000706:	f7ff ff47 	bl	8000598 <LL_DMA_ConfigAddresses>
	LL_DMA_EnableIT_TC(ASC_UA_DMA, ASC_UA_DMA_TX_STR);
 800070a:	2106      	movs	r1, #6
 800070c:	480b      	ldr	r0, [pc, #44]	; (800073c <initASC+0x58>)
 800070e:	f7ff ff8d 	bl	800062c <LL_DMA_EnableIT_TC>
	LL_DMA_EnableStream(ASC_UA_DMA, ASC_UA_DMA_TX_STR);
 8000712:	2106      	movs	r1, #6
 8000714:	4809      	ldr	r0, [pc, #36]	; (800073c <initASC+0x58>)
 8000716:	f7ff fedb 	bl	80004d0 <LL_DMA_EnableStream>
	LL_USART_EnableDMAReq_TX(ASC_USART);
 800071a:	480a      	ldr	r0, [pc, #40]	; (8000744 <initASC+0x60>)
 800071c:	f7ff ffa6 	bl	800066c <LL_USART_EnableDMAReq_TX>

	ascOS = LTOS_oneshotAlloc();
 8000720:	f002 fabc 	bl	8002c9c <LTOS_oneshotAlloc>
 8000724:	4603      	mov	r3, r0
 8000726:	4a08      	ldr	r2, [pc, #32]	; (8000748 <initASC+0x64>)
 8000728:	6013      	str	r3, [r2, #0]
	if(!ascOS) {
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <initASC+0x64>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d100      	bne.n	8000734 <initASC+0x50>
		while(1);
 8000732:	e7fe      	b.n	8000732 <initASC+0x4e>
	}
}
 8000734:	bf00      	nop
 8000736:	3704      	adds	r7, #4
 8000738:	46bd      	mov	sp, r7
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	40026000 	.word	0x40026000
 8000740:	200000ac 	.word	0x200000ac
 8000744:	40004400 	.word	0x40004400
 8000748:	2000030c 	.word	0x2000030c

0800074c <ASC_tx>:
  * 		ASC_XFER_SUCCESS : Success
  * 		ASC_XFER_TX_LEN_ERR : Transmit legth exceed max length
  * 		ASC_XFER_TX_BUSY_ERR: Transmit is busy now..
  */
ascXferRes_t ASC_tx(uint8_t *ptx, uint32_t len)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
	if( (len > MAX_ASC_XFER_LEN) || (!len) ) {
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800075c:	d802      	bhi.n	8000764 <ASC_tx+0x18>
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d101      	bne.n	8000768 <ASC_tx+0x1c>
		return ASC_XFER_TX_LEN_ERR;
 8000764:	2301      	movs	r3, #1
 8000766:	e021      	b.n	80007ac <ASC_tx+0x60>
	}
	if(ascState&ASC_XFER_STATE_TX) {
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <ASC_tx+0x68>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <ASC_tx+0x2c>
		return ASC_XFER_TX_BUSY_ERR;
 8000774:	2303      	movs	r3, #3
 8000776:	e019      	b.n	80007ac <ASC_tx+0x60>
	}

	ascState |= ASC_XFER_STATE_TX;
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <ASC_tx+0x68>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <ASC_tx+0x68>)
 8000784:	701a      	strb	r2, [r3, #0]

	memcpy(ascTxBuf, ptx, sizeof(uint8_t)*len);
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	6879      	ldr	r1, [r7, #4]
 800078a:	480b      	ldr	r0, [pc, #44]	; (80007b8 <ASC_tx+0x6c>)
 800078c:	f002 fb10 	bl	8002db0 <memcpy>

	LL_DMA_DisableStream(ASC_UA_DMA, ASC_UA_DMA_TX_STR);
 8000790:	2106      	movs	r1, #6
 8000792:	480a      	ldr	r0, [pc, #40]	; (80007bc <ASC_tx+0x70>)
 8000794:	f7ff febc 	bl	8000510 <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(ASC_UA_DMA, ASC_UA_DMA_TX_STR, len);
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	2106      	movs	r1, #6
 800079c:	4807      	ldr	r0, [pc, #28]	; (80007bc <ASC_tx+0x70>)
 800079e:	f7ff fed7 	bl	8000550 <LL_DMA_SetDataLength>
	LL_DMA_EnableStream(ASC_UA_DMA, ASC_UA_DMA_TX_STR);
 80007a2:	2106      	movs	r1, #6
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <ASC_tx+0x70>)
 80007a6:	f7ff fe93 	bl	80004d0 <LL_DMA_EnableStream>

	return ASC_XFER_SUCCESS;
 80007aa:	2300      	movs	r3, #0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000304 	.word	0x20000304
 80007b8:	200000ac 	.word	0x200000ac
 80007bc:	40026000 	.word	0x40026000

080007c0 <ASC_rx>:
  * 		ASC_XFER_SUCCESS : Success
  * 		ASC_XFER_RX_CALLBACK_ERR : rx callback address is NULL
  * 		ASC_XFER_RX_BUSY_ERR : ASC receiving now..
  */
ascXferRes_t ASC_rx(asc_rx_callback_t cb, uint32_t len, uint32_t tm)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
	if( (len > MAX_ASC_XFER_LEN) || (!len) ) {
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80007d2:	d802      	bhi.n	80007da <ASC_rx+0x1a>
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <ASC_rx+0x1e>
		return ASC_XFER_RX_LEN_ERR;
 80007da:	2302      	movs	r3, #2
 80007dc:	e022      	b.n	8000824 <ASC_rx+0x64>
	}
	if(cb == NULL) {
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d101      	bne.n	80007e8 <ASC_rx+0x28>
		return ASC_XFER_RX_CALLBACK_ERR;
 80007e4:	2305      	movs	r3, #5
 80007e6:	e01d      	b.n	8000824 <ASC_rx+0x64>
	}
	if(ascState&ASC_XFER_STATE_RX) {
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <ASC_rx+0x70>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	f003 0302 	and.w	r3, r3, #2
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <ASC_rx+0x38>
		return ASC_XFER_RX_BUSY_ERR;
 80007f4:	2304      	movs	r3, #4
 80007f6:	e015      	b.n	8000824 <ASC_rx+0x64>
	}

	ascRxCb = cb;
 80007f8:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <ASC_rx+0x74>)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6013      	str	r3, [r2, #0]
	ascRxCnt= len;
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	b29a      	uxth	r2, r3
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <ASC_rx+0x78>)
 8000804:	801a      	strh	r2, [r3, #0]
	ascTout = tm;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	461a      	mov	r2, r3
 800080a:	f04f 0300 	mov.w	r3, #0
 800080e:	490b      	ldr	r1, [pc, #44]	; (800083c <ASC_rx+0x7c>)
 8000810:	e9c1 2300 	strd	r2, r3, [r1]

	ascState |= ASC_XFER_STATE_RX;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <ASC_rx+0x70>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b04      	ldr	r3, [pc, #16]	; (8000830 <ASC_rx+0x70>)
 8000820:	701a      	strb	r2, [r3, #0]

	return ASC_XFER_SUCCESS;
 8000822:	2300      	movs	r3, #0
}
 8000824:	4618      	mov	r0, r3
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	20000304 	.word	0x20000304
 8000834:	20000308 	.word	0x20000308
 8000838:	2000033a 	.word	0x2000033a
 800083c:	20000330 	.word	0x20000330

08000840 <ascTASK>:
  * @brief  Asny. Comm. Task
  * @param	argument
  * @retval None
  */
void ascTASK(uint32_t arg)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	ascRxCb(ascRxBuf, ascRxCnt);
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <ascTASK+0x3c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <ascTASK+0x40>)
 800084e:	8812      	ldrh	r2, [r2, #0]
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	4611      	mov	r1, r2
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <ascTASK+0x44>)
 8000856:	4798      	blx	r3
	ascRxCb = NULL;
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <ascTASK+0x3c>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
	ascRxCnt = 0;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <ascTASK+0x40>)
 8000860:	2200      	movs	r2, #0
 8000862:	801a      	strh	r2, [r3, #0]
	ascState &= ~ASC_XFER_STATE_RX;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <ascTASK+0x48>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	f023 0302 	bic.w	r3, r3, #2
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <ascTASK+0x48>)
 8000870:	701a      	strb	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000308 	.word	0x20000308
 8000880:	2000033a 	.word	0x2000033a
 8000884:	200001d8 	.word	0x200001d8
 8000888:	20000304 	.word	0x20000304

0800088c <ASC_TXDMA_IRQHandler>:
  * @note   This function will be called by Interrupt Service..
  * @param  None
  * @retval None
  */
void ASC_TXDMA_IRQHandler()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	LL_DMA_ClearFlag_TC6(ASC_UA_DMA);
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <ASC_TXDMA_IRQHandler+0x1c>)
 8000892:	f7ff febd 	bl	8000610 <LL_DMA_ClearFlag_TC6>

	ascState &= ~ASC_XFER_STATE_TX;
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <ASC_TXDMA_IRQHandler+0x20>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	f023 0301 	bic.w	r3, r3, #1
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b02      	ldr	r3, [pc, #8]	; (80008ac <ASC_TXDMA_IRQHandler+0x20>)
 80008a2:	701a      	strb	r2, [r3, #0]
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40026000 	.word	0x40026000
 80008ac:	20000304 	.word	0x20000304

080008b0 <ASC_UARX_IRQHandler>:
  * @note   This function will be called by Interrupt Service..
  * @param  None
  * @retval None
  */
void ASC_UARX_IRQHandler()
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af02      	add	r7, sp, #8
	uint8_t rx;

	rx = LL_USART_ReceiveData8(ASC_USART);
 80008b6:	4818      	ldr	r0, [pc, #96]	; (8000918 <ASC_UARX_IRQHandler+0x68>)
 80008b8:	f7ff ff07 	bl	80006ca <LL_USART_ReceiveData8>
 80008bc:	4603      	mov	r3, r0
 80008be:	71fb      	strb	r3, [r7, #7]

	if(ascRxCnt == 0) {
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <ASC_UARX_IRQHandler+0x6c>)
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d022      	beq.n	800090e <ASC_UARX_IRQHandler+0x5e>
		return;
	}

	ascRxBuf[ascRxCtr++] = rx;
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <ASC_UARX_IRQHandler+0x70>)
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	1c5a      	adds	r2, r3, #1
 80008ce:	b291      	uxth	r1, r2
 80008d0:	4a13      	ldr	r2, [pc, #76]	; (8000920 <ASC_UARX_IRQHandler+0x70>)
 80008d2:	8011      	strh	r1, [r2, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	4a13      	ldr	r2, [pc, #76]	; (8000924 <ASC_UARX_IRQHandler+0x74>)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	5453      	strb	r3, [r2, r1]

	if(ascRxCtr == ascRxCnt) {
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <ASC_UARX_IRQHandler+0x70>)
 80008de:	881a      	ldrh	r2, [r3, #0]
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <ASC_UARX_IRQHandler+0x6c>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d113      	bne.n	8000910 <ASC_UARX_IRQHandler+0x60>
		if(ascRxCb != NULL) {
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <ASC_UARX_IRQHandler+0x78>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00a      	beq.n	8000906 <ASC_UARX_IRQHandler+0x56>
			LTOS_oneshotAttach(ascOS, (os_callback_t)ascTASK, 0, ascTout);
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <ASC_UARX_IRQHandler+0x7c>)
 80008f2:	6818      	ldr	r0, [r3, #0]
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <ASC_UARX_IRQHandler+0x80>)
 80008f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008fa:	e9cd 2300 	strd	r2, r3, [sp]
 80008fe:	2200      	movs	r2, #0
 8000900:	490c      	ldr	r1, [pc, #48]	; (8000934 <ASC_UARX_IRQHandler+0x84>)
 8000902:	f002 f97d 	bl	8002c00 <LTOS_oneshotAttach>
		}
		ascRxCtr = 0;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <ASC_UARX_IRQHandler+0x70>)
 8000908:	2200      	movs	r2, #0
 800090a:	801a      	strh	r2, [r3, #0]
 800090c:	e000      	b.n	8000910 <ASC_UARX_IRQHandler+0x60>
		return;
 800090e:	bf00      	nop
	}
}
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40004400 	.word	0x40004400
 800091c:	2000033a 	.word	0x2000033a
 8000920:	20000338 	.word	0x20000338
 8000924:	200001d8 	.word	0x200001d8
 8000928:	20000308 	.word	0x20000308
 800092c:	2000030c 	.word	0x2000030c
 8000930:	20000330 	.word	0x20000330
 8000934:	08000841 	.word	0x08000841

08000938 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	683a      	ldr	r2, [r7, #0]
 8000946:	619a      	str	r2, [r3, #24]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	041a      	lsls	r2, r3, #16
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	619a      	str	r2, [r3, #24]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <BlinkInit>:
  * @brief  Init Blink Task
  * @param	None
  * @retval None
  */
void BlinkInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af02      	add	r7, sp, #8
	blinkFlag = 0;
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <BlinkInit+0x3c>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]

	blinkOS = LTOS_oneshotAlloc();
 8000980:	f002 f98c 	bl	8002c9c <LTOS_oneshotAlloc>
 8000984:	4603      	mov	r3, r0
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <BlinkInit+0x40>)
 8000988:	6013      	str	r3, [r2, #0]
	if(blinkOS) {
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <BlinkInit+0x40>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d00a      	beq.n	80009a8 <BlinkInit+0x34>
		LTOS_oneshotAttach(blinkOS, (os_callback_t)BlinkTASK, 0, BLINK_OFF_TIME);
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <BlinkInit+0x40>)
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <BlinkInit+0x44>)
 8000998:	f04f 0300 	mov.w	r3, #0
 800099c:	e9cd 2300 	strd	r2, r3, [sp]
 80009a0:	2200      	movs	r2, #0
 80009a2:	4906      	ldr	r1, [pc, #24]	; (80009bc <BlinkInit+0x48>)
 80009a4:	f002 f92c 	bl	8002c00 <LTOS_oneshotAttach>
	}
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000340 	.word	0x20000340
 80009b4:	2000033c 	.word	0x2000033c
 80009b8:	001cfde0 	.word	0x001cfde0
 80009bc:	080009c1 	.word	0x080009c1

080009c0 <BlinkTASK>:
  * @brief  Blink Task
  * @param	argument
  * @retval None
  */
void BlinkTASK(uint32_t arg)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af02      	add	r7, sp, #8
 80009c6:	6078      	str	r0, [r7, #4]
	tick_t tout;

	blinkFlag ^= 1;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <BlinkTASK+0x60>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	f083 0301 	eor.w	r3, r3, #1
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <BlinkTASK+0x60>)
 80009d4:	701a      	strb	r2, [r3, #0]

	if(blinkFlag) {
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <BlinkTASK+0x60>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d009      	beq.n	80009f2 <BlinkTASK+0x32>
		LL_GPIO_SetOutputPin(BLINK_LED_GPIO_Port, BLINK_LED_Pin);
 80009de:	2120      	movs	r1, #32
 80009e0:	4810      	ldr	r0, [pc, #64]	; (8000a24 <BlinkTASK+0x64>)
 80009e2:	f7ff ffa9 	bl	8000938 <LL_GPIO_SetOutputPin>
		tout = BLINK_ON_TIME;
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <BlinkTASK+0x68>)
 80009e8:	f04f 0300 	mov.w	r3, #0
 80009ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80009f0:	e008      	b.n	8000a04 <BlinkTASK+0x44>
	} else {
		LL_GPIO_ResetOutputPin(BLINK_LED_GPIO_Port, BLINK_LED_Pin);
 80009f2:	2120      	movs	r1, #32
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <BlinkTASK+0x64>)
 80009f6:	f7ff ffad 	bl	8000954 <LL_GPIO_ResetOutputPin>
		tout = BLINK_OFF_TIME;
 80009fa:	4a0c      	ldr	r2, [pc, #48]	; (8000a2c <BlinkTASK+0x6c>)
 80009fc:	f04f 0300 	mov.w	r3, #0
 8000a00:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	LTOS_oneshotAttach(blinkOS, (os_callback_t)BlinkTASK, 0, tout);
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <BlinkTASK+0x70>)
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000a0c:	e9cd 2300 	strd	r2, r3, [sp]
 8000a10:	2200      	movs	r2, #0
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <BlinkTASK+0x74>)
 8000a14:	f002 f8f4 	bl	8002c00 <LTOS_oneshotAttach>
}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000340 	.word	0x20000340
 8000a24:	40020000 	.word	0x40020000
 8000a28:	000186a0 	.word	0x000186a0
 8000a2c:	001cfde0 	.word	0x001cfde0
 8000a30:	2000033c 	.word	0x2000033c
 8000a34:	080009c1 	.word	0x080009c1

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	db0b      	blt.n	8000a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f003 021f 	and.w	r2, r3, #31
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <__NVIC_EnableIRQ+0x38>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	2001      	movs	r0, #1
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b58:	4907      	ldr	r1, [pc, #28]	; (8000b78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4013      	ands	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	40023800 	.word	0x40023800

08000b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000b80:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000b84:	f7ff ffe2 	bl	8000b4c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b88:	f7ff ff56 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ffa6 	bl	8000ae4 <NVIC_EncodePriority>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	2011      	movs	r0, #17
 8000b9e:	f7ff ff77 	bl	8000a90 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ba2:	2011      	movs	r0, #17
 8000ba4:	f7ff ff56 	bl	8000a54 <__NVIC_EnableIRQ>

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <LL_AHB1_GRP1_EnableClock>:
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bb8:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40023800 	.word	0x40023800

08000bdc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000be6:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <LL_SYSCFG_SetEXTISource+0x58>)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	3302      	adds	r3, #2
 8000bee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	0c1b      	lsrs	r3, r3, #16
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	ea02 0103 	and.w	r1, r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	0c1b      	lsrs	r3, r3, #16
 8000c00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	fa93 f3a3 	rbit	r3, r3
 8000c08:	60bb      	str	r3, [r7, #8]
  return result;
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	fab3 f383 	clz	r3, r3
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	fa03 f202 	lsl.w	r2, r3, r2
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <LL_SYSCFG_SetEXTISource+0x58>)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	430a      	orrs	r2, r1
 8000c22:	3302      	adds	r3, #2
 8000c24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	40013800 	.word	0x40013800

08000c38 <LL_GPIO_SetPinMode>:
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa93 f3a3 	rbit	r3, r3
 8000c52:	613b      	str	r3, [r7, #16]
  return result;
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	fab3 f383 	clz	r3, r3
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	2103      	movs	r1, #3
 8000c60:	fa01 f303 	lsl.w	r3, r1, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	401a      	ands	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	fa93 f3a3 	rbit	r3, r3
 8000c72:	61bb      	str	r3, [r7, #24]
  return result;
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fab3 f383 	clz	r3, r3
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	431a      	orrs	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	601a      	str	r2, [r3, #0]
}
 8000c8a:	bf00      	nop
 8000c8c:	3724      	adds	r7, #36	; 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <LL_GPIO_SetPinPull>:
{
 8000c96:	b480      	push	{r7}
 8000c98:	b089      	sub	sp, #36	; 0x24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	60f8      	str	r0, [r7, #12]
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	68da      	ldr	r2, [r3, #12]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	fa93 f3a3 	rbit	r3, r3
 8000cb0:	613b      	str	r3, [r7, #16]
  return result;
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	fab3 f383 	clz	r3, r3
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2103      	movs	r1, #3
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	401a      	ands	r2, r3
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa93 f3a3 	rbit	r3, r3
 8000cd0:	61bb      	str	r3, [r7, #24]
  return result;
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	fab3 f383 	clz	r3, r3
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	60da      	str	r2, [r3, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3724      	adds	r7, #36	; 0x24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <LL_GPIO_ResetOutputPin>:
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	041a      	lsls	r2, r3, #16
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	619a      	str	r2, [r3, #24]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000d1a:	f107 0318 	add.w	r3, r7, #24
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	463b      	mov	r3, r7
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]
 8000d32:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000d34:	2004      	movs	r0, #4
 8000d36:	f7ff ff39 	bl	8000bac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000d3a:	2080      	movs	r0, #128	; 0x80
 8000d3c:	f7ff ff36 	bl	8000bac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d40:	2001      	movs	r0, #1
 8000d42:	f7ff ff33 	bl	8000bac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000d46:	2002      	movs	r0, #2
 8000d48:	f7ff ff30 	bl	8000bac <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(BLINK_LED_GPIO_Port, BLINK_LED_Pin);
 8000d4c:	2120      	movs	r1, #32
 8000d4e:	481a      	ldr	r0, [pc, #104]	; (8000db8 <MX_GPIO_Init+0xa4>)
 8000d50:	f7ff ffd0 	bl	8000cf4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000d54:	4919      	ldr	r1, [pc, #100]	; (8000dbc <MX_GPIO_Init+0xa8>)
 8000d56:	2002      	movs	r0, #2
 8000d58:	f7ff ff40 	bl	8000bdc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000d5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d60:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d62:	2301      	movs	r3, #1
 8000d64:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d66:	2300      	movs	r3, #0
 8000d68:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d6e:	f107 0318 	add.w	r3, r7, #24
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 f80e 	bl	8001d94 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7e:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <MX_GPIO_Init+0xac>)
 8000d80:	f7ff ff89 	bl	8000c96 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <MX_GPIO_Init+0xac>)
 8000d8c:	f7ff ff54 	bl	8000c38 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = BLINK_LED_Pin;
 8000d90:	2320      	movs	r3, #32
 8000d92:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d94:	2301      	movs	r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BLINK_LED_GPIO_Port, &GPIO_InitStruct);
 8000da4:	463b      	mov	r3, r7
 8000da6:	4619      	mov	r1, r3
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <MX_GPIO_Init+0xa4>)
 8000daa:	f001 f979 	bl	80020a0 <LL_GPIO_Init>

}
 8000dae:	bf00      	nop
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	00f00003 	.word	0x00f00003
 8000dc0:	40020800 	.word	0x40020800

08000dc4 <__NVIC_SetPriorityGrouping>:
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <LL_RCC_HSI_Enable+0x1c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <LL_RCC_HSI_Enable+0x1c>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800

08000e2c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <LL_RCC_HSI_IsReady+0x20>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	bf0c      	ite	eq
 8000e3c:	2301      	moveq	r3, #1
 8000e3e:	2300      	movne	r3, #0
 8000e40:	b2db      	uxtb	r3, r3
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	40023800 	.word	0x40023800

08000e50 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	4904      	ldr	r1, [pc, #16]	; (8000e78 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000e66:	4313      	orrs	r3, r2
 8000e68:	600b      	str	r3, [r1, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800

08000e7c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <LL_RCC_SetSysClkSource+0x24>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f023 0203 	bic.w	r2, r3, #3
 8000e8c:	4904      	ldr	r1, [pc, #16]	; (8000ea0 <LL_RCC_SetSysClkSource+0x24>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	608b      	str	r3, [r1, #8]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <LL_RCC_GetSysClkSource+0x18>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f003 030c 	and.w	r3, r3, #12
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ed0:	4904      	ldr	r1, [pc, #16]	; (8000ee4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	608b      	str	r3, [r1, #8]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000ef8:	4904      	ldr	r1, [pc, #16]	; (8000f0c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	608b      	str	r3, [r1, #8]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	40023800 	.word	0x40023800

08000f10 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f20:	4904      	ldr	r1, [pc, #16]	; (8000f34 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	608b      	str	r3, [r1, #8]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	40023800 	.word	0x40023800

08000f38 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <LL_RCC_SetTIMPrescaler+0x28>)
 8000f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f46:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000f4a:	4905      	ldr	r1, [pc, #20]	; (8000f60 <LL_RCC_SetTIMPrescaler+0x28>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	40023800 	.word	0x40023800

08000f64 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <LL_RCC_PLL_Enable+0x1c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <LL_RCC_PLL_Enable+0x1c>)
 8000f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800

08000f84 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <LL_RCC_PLL_IsReady+0x24>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f94:	bf0c      	ite	eq
 8000f96:	2301      	moveq	r3, #1
 8000f98:	2300      	movne	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	4311      	orrs	r1, r2
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	0192      	lsls	r2, r2, #6
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000fdc:	4904      	ldr	r1, [pc, #16]	; (8000ff0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	ffbf8000 	.word	0xffbf8000

08000ff8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001004:	4907      	ldr	r1, [pc, #28]	; (8001024 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4313      	orrs	r3, r2
 800100a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <LL_APB1_GRP1_EnableClock+0x2c>)
 800100e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4013      	ands	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	40023800 	.word	0x40023800

08001028 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001034:	4907      	ldr	r1, [pc, #28]	; (8001054 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4313      	orrs	r3, r2
 800103a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <LL_APB2_GRP1_EnableClock+0x2c>)
 800103e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4013      	ands	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	40023800 	.word	0x40023800

08001058 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <LL_FLASH_SetLatency+0x24>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f023 0207 	bic.w	r2, r3, #7
 8001068:	4904      	ldr	r1, [pc, #16]	; (800107c <LL_FLASH_SetLatency+0x24>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4313      	orrs	r3, r2
 800106e:	600b      	str	r3, [r1, #0]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40023c00 	.word	0x40023c00

08001080 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <LL_FLASH_GetLatency+0x18>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0307 	and.w	r3, r3, #7
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023c00 	.word	0x40023c00

0800109c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80010ac:	4904      	ldr	r1, [pc, #16]	; (80010c0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	600b      	str	r3, [r1, #0]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40007000 	.word	0x40007000

080010c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80010c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010cc:	f7ff ffac 	bl	8001028 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80010d0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80010d4:	f7ff ff90 	bl	8000ff8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010d8:	2007      	movs	r0, #7
 80010da:	f7ff fe73 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010de:	f000 f811 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e2:	f7ff fe17 	bl	8000d14 <MX_GPIO_Init>
  MX_DMA_Init();
 80010e6:	f7ff fd49 	bl	8000b7c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010ea:	f000 fc93 	bl	8001a14 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 80010ee:	f000 fa0f 	bl	8001510 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  initASC();
 80010f2:	f7ff faf7 	bl	80006e4 <initASC>
  initDEMO();
 80010f6:	f000 fd4b 	bl	8001b90 <initDEMO>
  BlinkInit();
 80010fa:	f7ff fc3b 	bl	8000974 <BlinkInit>
  LTOS_run();
 80010fe:	f001 fd09 	bl	8002b14 <LTOS_run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001102:	e7fe      	b.n	8001102 <main+0x3e>

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001108:	2002      	movs	r0, #2
 800110a:	f7ff ffa5 	bl	8001058 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800110e:	bf00      	nop
 8001110:	f7ff ffb6 	bl	8001080 <LL_FLASH_GetLatency>
 8001114:	4603      	mov	r3, r0
 8001116:	2b02      	cmp	r3, #2
 8001118:	d1fa      	bne.n	8001110 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 800111a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800111e:	f7ff ffbd 	bl	800109c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001122:	2010      	movs	r0, #16
 8001124:	f7ff fe94 	bl	8000e50 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001128:	f7ff fe70 	bl	8000e0c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800112c:	bf00      	nop
 800112e:	f7ff fe7d 	bl	8000e2c <LL_RCC_HSI_IsReady>
 8001132:	4603      	mov	r3, r0
 8001134:	2b01      	cmp	r3, #1
 8001136:	d1fa      	bne.n	800112e <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8001138:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113c:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001140:	2110      	movs	r1, #16
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff ff32 	bl	8000fac <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001148:	f7ff ff0c 	bl	8000f64 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800114c:	bf00      	nop
 800114e:	f7ff ff19 	bl	8000f84 <LL_RCC_PLL_IsReady>
 8001152:	4603      	mov	r3, r0
 8001154:	2b01      	cmp	r3, #1
 8001156:	d1fa      	bne.n	800114e <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff feb1 	bl	8000ec0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800115e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001162:	f7ff fec1 	bl	8000ee8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff fed2 	bl	8000f10 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800116c:	2002      	movs	r0, #2
 800116e:	f7ff fe85 	bl	8000e7c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001172:	bf00      	nop
 8001174:	f7ff fe96 	bl	8000ea4 <LL_RCC_GetSysClkSource>
 8001178:	4603      	mov	r3, r0
 800117a:	2b08      	cmp	r3, #8
 800117c:	d1fa      	bne.n	8001174 <SystemClock_Config+0x70>
  {

  }
  LL_Init1msTick(84000000);
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <SystemClock_Config+0x90>)
 8001180:	f001 fc38 	bl	80029f4 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <SystemClock_Config+0x90>)
 8001186:	f001 fc43 	bl	8002a10 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff fed4 	bl	8000f38 <LL_RCC_SetTIMPrescaler>
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	0501bd00 	.word	0x0501bd00

08001198 <LL_DMA_IsActiveFlag_TC6>:
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80011ac:	bf0c      	ite	eq
 80011ae:	2301      	moveq	r3, #1
 80011b0:	2300      	movne	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f06f 0201 	mvn.w	r2, #1
 80011ce:	611a      	str	r2, [r3, #16]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <LL_USART_IsActiveFlag_RXNE>:
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0320 	and.w	r3, r3, #32
 8001212:	2b20      	cmp	r3, #32
 8001214:	bf0c      	ite	eq
 8001216:	2301      	moveq	r3, #1
 8001218:	2300      	movne	r3, #0
 800121a:	b2db      	uxtb	r3, r3
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800122c:	e7fe      	b.n	800122c <NMI_Handler+0x4>

0800122e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <MemManage_Handler+0x4>

0800123a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <UsageFault_Handler+0x4>

08001246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(ASC_UA_DMA)) {
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <DMA1_Stream6_IRQHandler+0x18>)
 8001286:	f7ff ff87 	bl	8001198 <LL_DMA_IsActiveFlag_TC6>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <DMA1_Stream6_IRQHandler+0x14>
		ASC_TXDMA_IRQHandler();
 8001290:	f7ff fafc 	bl	800088c <ASC_TXDMA_IRQHandler>
  /* USER CODE END DMA1_Stream6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40026000 	.word	0x40026000

0800129c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM11)) {
 80012a0:	4806      	ldr	r0, [pc, #24]	; (80012bc <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 80012a2:	f7ff ff9b 	bl	80011dc <LL_TIM_IsActiveFlag_UPDATE>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d004      	beq.n	80012b6 <TIM1_TRG_COM_TIM11_IRQHandler+0x1a>
		LL_TIM_ClearFlag_UPDATE(TIM11);
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 80012ae:	f7ff ff87 	bl	80011c0 <LL_TIM_ClearFlag_UPDATE>
		LTOS_tickIncrease();
 80012b2:	f001 fd31 	bl	8002d18 <LTOS_tickIncrease>
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40014800 	.word	0x40014800

080012c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART2)) {
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <USART2_IRQHandler+0x18>)
 80012c6:	f7ff ff9c 	bl	8001202 <LL_USART_IsActiveFlag_RXNE>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <USART2_IRQHandler+0x14>
		ASC_UARX_IRQHandler();
 80012d0:	f7ff faee 	bl	80008b0 <ASC_UARX_IRQHandler>
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40004400 	.word	0x40004400

080012dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <_sbrk+0x5c>)
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <_sbrk+0x60>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <_sbrk+0x64>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <_sbrk+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800130c:	f001 fd16 	bl	8002d3c <__errno>
 8001310:	4603      	mov	r3, r0
 8001312:	220c      	movs	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	e009      	b.n	8001330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <_sbrk+0x64>)
 800132c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20018000 	.word	0x20018000
 800133c:	00000400 	.word	0x00000400
 8001340:	20000310 	.word	0x20000310
 8001344:	20000360 	.word	0x20000360

08001348 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <SystemInit+0x20>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <SystemInit+0x20>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_EnableIRQ>:
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 021f 	and.w	r2, r3, #31
 80013a0:	4907      	ldr	r1, [pc, #28]	; (80013c0 <__NVIC_EnableIRQ+0x38>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	2001      	movs	r0, #1
 80013aa:	fa00 f202 	lsl.w	r2, r0, r2
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <__NVIC_SetPriority>:
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <LL_APB2_GRP1_EnableClock>:
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800148a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800148c:	4907      	ldr	r1, [pc, #28]	; (80014ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4313      	orrs	r3, r2
 8001492:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8001496:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4013      	ands	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	40023800 	.word	0x40023800

080014b0 <LL_TIM_EnableCounter>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f043 0201 	orr.w	r2, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	601a      	str	r2, [r3, #0]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_TIM_EnableARRPreload>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	601a      	str	r2, [r3, #0]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	60da      	str	r2, [r3, #12]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <MX_TIM11_Init>:

/* USER CODE END 0 */

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM11);
 8001524:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001528:	f7ff ffaa 	bl	8001480 <LL_APB2_GRP1_EnableClock>

  /* TIM11 interrupt Init */
  NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800152c:	f7ff ff1e 	bl	800136c <__NVIC_GetPriorityGrouping>
 8001530:	4603      	mov	r3, r0
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff6e 	bl	8001418 <NVIC_EncodePriority>
 800153c:	4603      	mov	r3, r0
 800153e:	4619      	mov	r1, r3
 8001540:	201a      	movs	r0, #26
 8001542:	f7ff ff3f 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001546:	201a      	movs	r0, #26
 8001548:	f7ff ff1e 	bl	8001388 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 800154c:	2353      	movs	r3, #83	; 0x53
 800154e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8001554:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001558:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM11, &TIM_InitStruct);
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4619      	mov	r1, r3
 8001562:	4809      	ldr	r0, [pc, #36]	; (8001588 <MX_TIM11_Init+0x78>)
 8001564:	f000 ff84 	bl	8002470 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM11);
 8001568:	4807      	ldr	r0, [pc, #28]	; (8001588 <MX_TIM11_Init+0x78>)
 800156a:	f7ff ffb1 	bl	80014d0 <LL_TIM_EnableARRPreload>
  /* USER CODE BEGIN TIM11_Init 2 */
  LL_TIM_EnableARRPreload(TIM11);
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <MX_TIM11_Init+0x78>)
 8001570:	f7ff ffae 	bl	80014d0 <LL_TIM_EnableARRPreload>
  LL_TIM_EnableCounter(TIM11);
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_TIM11_Init+0x78>)
 8001576:	f7ff ff9b 	bl	80014b0 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM11);
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <MX_TIM11_Init+0x78>)
 800157c:	f7ff ffb8 	bl	80014f0 <LL_TIM_EnableIT_UPDATE>

  /* USER CODE END TIM11_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40014800 	.word	0x40014800

0800158c <__NVIC_GetPriorityGrouping>:
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_EnableIRQ>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0b      	blt.n	80015d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <__NVIC_EnableIRQ+0x38>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2001      	movs	r0, #1
 80015ca:	fa00 f202 	lsl.w	r2, r0, r2
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <__NVIC_SetPriority>:
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	; (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	; (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <LL_DMA_SetDataTransferDirection>:
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80016ac:	4a0d      	ldr	r2, [pc, #52]	; (80016e4 <LL_DMA_SetDataTransferDirection+0x44>)
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	4413      	add	r3, r2
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80016c0:	4908      	ldr	r1, [pc, #32]	; (80016e4 <LL_DMA_SetDataTransferDirection+0x44>)
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	440b      	add	r3, r1
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	440b      	add	r3, r1
 80016ce:	4619      	mov	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	08002f94 	.word	0x08002f94

080016e8 <LL_DMA_SetMode>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80016f4:	4a0d      	ldr	r2, [pc, #52]	; (800172c <LL_DMA_SetMode+0x44>)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	4413      	add	r3, r2
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4413      	add	r3, r2
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8001708:	4908      	ldr	r1, [pc, #32]	; (800172c <LL_DMA_SetMode+0x44>)
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	440b      	add	r3, r1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	440b      	add	r3, r1
 8001716:	4619      	mov	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	08002f94 	.word	0x08002f94

08001730 <LL_DMA_SetPeriphIncMode>:
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800173c:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <LL_DMA_SetPeriphIncMode+0x44>)
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	4413      	add	r3, r2
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4413      	add	r3, r2
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001750:	4908      	ldr	r1, [pc, #32]	; (8001774 <LL_DMA_SetPeriphIncMode+0x44>)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	440b      	add	r3, r1
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	440b      	add	r3, r1
 800175e:	4619      	mov	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]
}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	08002f94 	.word	0x08002f94

08001778 <LL_DMA_SetMemoryIncMode>:
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8001784:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <LL_DMA_SetMemoryIncMode+0x44>)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4413      	add	r3, r2
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001798:	4908      	ldr	r1, [pc, #32]	; (80017bc <LL_DMA_SetMemoryIncMode+0x44>)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	440b      	add	r3, r1
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	440b      	add	r3, r1
 80017a6:	4619      	mov	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	08002f94 	.word	0x08002f94

080017c0 <LL_DMA_SetPeriphSize>:
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <LL_DMA_SetPeriphSize+0x44>)
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4413      	add	r3, r2
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80017e0:	4908      	ldr	r1, [pc, #32]	; (8001804 <LL_DMA_SetPeriphSize+0x44>)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	440b      	add	r3, r1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	440b      	add	r3, r1
 80017ee:	4619      	mov	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	08002f94 	.word	0x08002f94

08001808 <LL_DMA_SetMemorySize>:
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <LL_DMA_SetMemorySize+0x44>)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	4413      	add	r3, r2
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001828:	4908      	ldr	r1, [pc, #32]	; (800184c <LL_DMA_SetMemorySize+0x44>)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	440b      	add	r3, r1
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	440b      	add	r3, r1
 8001836:	4619      	mov	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	08002f94 	.word	0x08002f94

08001850 <LL_DMA_SetStreamPriorityLevel>:
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	4413      	add	r3, r2
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4413      	add	r3, r2
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001870:	4908      	ldr	r1, [pc, #32]	; (8001894 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	440b      	add	r3, r1
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	440b      	add	r3, r1
 800187e:	4619      	mov	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	08002f94 	.word	0x08002f94

08001898 <LL_DMA_SetChannelSelection>:
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80018a4:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <LL_DMA_SetChannelSelection+0x44>)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	4413      	add	r3, r2
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4413      	add	r3, r2
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80018b8:	4908      	ldr	r1, [pc, #32]	; (80018dc <LL_DMA_SetChannelSelection+0x44>)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	440b      	add	r3, r1
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	440b      	add	r3, r1
 80018c6:	4619      	mov	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	08002f94 	.word	0x08002f94

080018e0 <LL_DMA_DisableFifoMode>:
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80018ea:	4a0c      	ldr	r2, [pc, #48]	; (800191c <LL_DMA_DisableFifoMode+0x3c>)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	4908      	ldr	r1, [pc, #32]	; (800191c <LL_DMA_DisableFifoMode+0x3c>)
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	440a      	add	r2, r1
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	4611      	mov	r1, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	440a      	add	r2, r1
 8001908:	f023 0304 	bic.w	r3, r3, #4
 800190c:	6153      	str	r3, [r2, #20]
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	08002f94 	.word	0x08002f94

08001920 <LL_AHB1_GRP1_EnableClock>:
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800192a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4313      	orrs	r3, r2
 8001932:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4013      	ands	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40023800 	.word	0x40023800

08001950 <LL_APB1_GRP1_EnableClock>:
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <LL_APB1_GRP1_EnableClock+0x2c>)
 800195a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800195c:	4907      	ldr	r1, [pc, #28]	; (800197c <LL_APB1_GRP1_EnableClock+0x2c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4313      	orrs	r3, r2
 8001962:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4013      	ands	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	40023800 	.word	0x40023800

08001980 <LL_USART_Enable>:
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	60da      	str	r2, [r3, #12]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_USART_ConfigAsyncMode>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	615a      	str	r2, [r3, #20]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_USART_EnableIT_RXNE>:
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	330c      	adds	r3, #12
 80019d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	e853 3f00 	ldrex	r3, [r3]
 80019e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	f043 0320 	orr.w	r3, r3, #32
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	330c      	adds	r3, #12
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	61ba      	str	r2, [r7, #24]
 80019f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019f4:	6979      	ldr	r1, [r7, #20]
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	e841 2300 	strex	r3, r2, [r1]
 80019fc:	613b      	str	r3, [r7, #16]
   return(result);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e7      	bne.n	80019d4 <LL_USART_EnableIT_RXNE+0x8>
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08e      	sub	sp, #56	; 0x38
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	615a      	str	r2, [r3, #20]
 8001a2c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
 8001a3c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001a3e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a42:	f7ff ff85 	bl	8001950 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff ff6a 	bl	8001920 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a50:	2302      	movs	r3, #2
 8001a52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001a60:	2307      	movs	r3, #7
 8001a62:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	4619      	mov	r1, r3
 8001a68:	4831      	ldr	r0, [pc, #196]	; (8001b30 <MX_USART2_UART_Init+0x11c>)
 8001a6a:	f000 fb19 	bl	80020a0 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 8001a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a72:	2106      	movs	r1, #6
 8001a74:	482f      	ldr	r0, [pc, #188]	; (8001b34 <MX_USART2_UART_Init+0x120>)
 8001a76:	f7ff ff0f 	bl	8001898 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001a7a:	2240      	movs	r2, #64	; 0x40
 8001a7c:	2106      	movs	r1, #6
 8001a7e:	482d      	ldr	r0, [pc, #180]	; (8001b34 <MX_USART2_UART_Init+0x120>)
 8001a80:	f7ff fe0e 	bl	80016a0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2106      	movs	r1, #6
 8001a88:	482a      	ldr	r0, [pc, #168]	; (8001b34 <MX_USART2_UART_Init+0x120>)
 8001a8a:	f7ff fee1 	bl	8001850 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2106      	movs	r1, #6
 8001a92:	4828      	ldr	r0, [pc, #160]	; (8001b34 <MX_USART2_UART_Init+0x120>)
 8001a94:	f7ff fe28 	bl	80016e8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2106      	movs	r1, #6
 8001a9c:	4825      	ldr	r0, [pc, #148]	; (8001b34 <MX_USART2_UART_Init+0x120>)
 8001a9e:	f7ff fe47 	bl	8001730 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8001aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa6:	2106      	movs	r1, #6
 8001aa8:	4822      	ldr	r0, [pc, #136]	; (8001b34 <MX_USART2_UART_Init+0x120>)
 8001aaa:	f7ff fe65 	bl	8001778 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2106      	movs	r1, #6
 8001ab2:	4820      	ldr	r0, [pc, #128]	; (8001b34 <MX_USART2_UART_Init+0x120>)
 8001ab4:	f7ff fe84 	bl	80017c0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2106      	movs	r1, #6
 8001abc:	481d      	ldr	r0, [pc, #116]	; (8001b34 <MX_USART2_UART_Init+0x120>)
 8001abe:	f7ff fea3 	bl	8001808 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 8001ac2:	2106      	movs	r1, #6
 8001ac4:	481b      	ldr	r0, [pc, #108]	; (8001b34 <MX_USART2_UART_Init+0x120>)
 8001ac6:	f7ff ff0b 	bl	80018e0 <LL_DMA_DisableFifoMode>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001aca:	f7ff fd5f 	bl	800158c <__NVIC_GetPriorityGrouping>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fdaf 	bl	8001638 <NVIC_EncodePriority>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4619      	mov	r1, r3
 8001ade:	2026      	movs	r0, #38	; 0x26
 8001ae0:	f7ff fd80 	bl	80015e4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001ae4:	2026      	movs	r0, #38	; 0x26
 8001ae6:	f7ff fd5f 	bl	80015a8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */
	LL_USART_EnableIT_RXNE(ASC_USART);
 8001aea:	4813      	ldr	r0, [pc, #76]	; (8001b38 <MX_USART2_UART_Init+0x124>)
 8001aec:	f7ff ff6e 	bl	80019cc <LL_USART_EnableIT_RXNE>

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 512000;
 8001af0:	f44f 23fa 	mov.w	r3, #512000	; 0x7d000
 8001af4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b02:	230c      	movs	r3, #12
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	4619      	mov	r1, r3
 8001b14:	4808      	ldr	r0, [pc, #32]	; (8001b38 <MX_USART2_UART_Init+0x124>)
 8001b16:	f000 feef 	bl	80028f8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001b1a:	4807      	ldr	r0, [pc, #28]	; (8001b38 <MX_USART2_UART_Init+0x124>)
 8001b1c:	f7ff ff40 	bl	80019a0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_USART2_UART_Init+0x124>)
 8001b22:	f7ff ff2d 	bl	8001980 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	3738      	adds	r7, #56	; 0x38
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40026000 	.word	0x40026000
 8001b38:	40004400 	.word	0x40004400

08001b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b40:	480d      	ldr	r0, [pc, #52]	; (8001b78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b42:	490e      	ldr	r1, [pc, #56]	; (8001b7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b44:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b58:	4c0b      	ldr	r4, [pc, #44]	; (8001b88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b66:	f7ff fbef 	bl	8001348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6a:	f001 f8ed 	bl	8002d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b6e:	f7ff faa9 	bl	80010c4 <main>
  bx  lr    
 8001b72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b7c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001b80:	08002fac 	.word	0x08002fac
  ldr r2, =_sbss
 8001b84:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001b88:	2000035c 	.word	0x2000035c

08001b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b8c:	e7fe      	b.n	8001b8c <ADC_IRQHandler>
	...

08001b90 <initDEMO>:
  * @brief  init Async. Comm. module
  * @param  None
  * @retval None
  */
void initDEMO(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af02      	add	r7, sp, #8
	demoOS = LTOS_oneshotAlloc();
 8001b96:	f001 f881 	bl	8002c9c <LTOS_oneshotAlloc>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <initDEMO+0x48>)
 8001b9e:	6013      	str	r3, [r2, #0]
	if(demoOS) {
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <initDEMO+0x48>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00a      	beq.n	8001bbe <initDEMO+0x2e>
		LTOS_oneshotAttach(demoOS, (os_callback_t)DemoTASK, 0, DEMO_PER_TIME);
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <initDEMO+0x48>)
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	a308      	add	r3, pc, #32	; (adr r3, 8001bd0 <initDEMO+0x40>)
 8001bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb2:	e9cd 2300 	strd	r2, r3, [sp]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	4908      	ldr	r1, [pc, #32]	; (8001bdc <initDEMO+0x4c>)
 8001bba:	f001 f821 	bl	8002c00 <LTOS_oneshotAttach>
	}

	ASC_rx(DemoASCCallback, DEMO_MAX_RX_SIZE, _1ms);
 8001bbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bc2:	2105      	movs	r1, #5
 8001bc4:	4806      	ldr	r0, [pc, #24]	; (8001be0 <initDEMO+0x50>)
 8001bc6:	f7fe fdfb 	bl	80007c0 <ASC_rx>
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	004c4b40 	.word	0x004c4b40
 8001bd4:	00000000 	.word	0x00000000
 8001bd8:	20000314 	.word	0x20000314
 8001bdc:	08001be9 	.word	0x08001be9
 8001be0:	08001c2d 	.word	0x08001c2d
 8001be4:	00000000 	.word	0x00000000

08001be8 <DemoTASK>:
  * @brief  Demo Task
  * @param	argument
  * @retval None
  */
void DemoTASK(uint32_t arg)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	6078      	str	r0, [r7, #4]
	ASC_tx((uint8_t *)demoTxBuf, sizeof(demoTxBuf)-1);
 8001bf0:	2120      	movs	r1, #32
 8001bf2:	480b      	ldr	r0, [pc, #44]	; (8001c20 <DemoTASK+0x38>)
 8001bf4:	f7fe fdaa 	bl	800074c <ASC_tx>

	LTOS_oneshotAttach(demoOS, (os_callback_t)DemoTASK, 0, DEMO_PER_TIME);
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <DemoTASK+0x3c>)
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	a306      	add	r3, pc, #24	; (adr r3, 8001c18 <DemoTASK+0x30>)
 8001bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c02:	e9cd 2300 	strd	r2, r3, [sp]
 8001c06:	2200      	movs	r2, #0
 8001c08:	4907      	ldr	r1, [pc, #28]	; (8001c28 <DemoTASK+0x40>)
 8001c0a:	f000 fff9 	bl	8002c00 <LTOS_oneshotAttach>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	004c4b40 	.word	0x004c4b40
 8001c1c:	00000000 	.word	0x00000000
 8001c20:	20000004 	.word	0x20000004
 8001c24:	20000314 	.word	0x20000314
 8001c28:	08001be9 	.word	0x08001be9

08001c2c <DemoASCCallback>:
  * @param	pRx	: Received buffer's pointer
  * 		len	: Received byte length
  * @retval None
  */
void DemoASCCallback(uint8_t *pRx, uint8_t len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	70fb      	strb	r3, [r7, #3]
	if(len > DEMO_MAX_RX_SIZE) {
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	2b05      	cmp	r3, #5
 8001c3c:	d80b      	bhi.n	8001c56 <DemoASCCallback+0x2a>
		return;
	}

	memcpy(demoRxBuf, pRx, sizeof(uint8_t)*len);
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	461a      	mov	r2, r3
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4806      	ldr	r0, [pc, #24]	; (8001c60 <DemoASCCallback+0x34>)
 8001c46:	f001 f8b3 	bl	8002db0 <memcpy>

	ASC_tx((uint8_t *)demoRxBuf, len);
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4804      	ldr	r0, [pc, #16]	; (8001c60 <DemoASCCallback+0x34>)
 8001c50:	f7fe fd7c 	bl	800074c <ASC_tx>
 8001c54:	e000      	b.n	8001c58 <DemoASCCallback+0x2c>
		return;
 8001c56:	bf00      	nop
}
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000344 	.word	0x20000344

08001c64 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <LL_EXTI_EnableIT_0_31+0x20>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4904      	ldr	r1, [pc, #16]	; (8001c84 <LL_EXTI_EnableIT_0_31+0x20>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	600b      	str	r3, [r1, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	40013c00 	.word	0x40013c00

08001c88 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <LL_EXTI_DisableIT_0_31+0x24>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	4904      	ldr	r1, [pc, #16]	; (8001cac <LL_EXTI_DisableIT_0_31+0x24>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40013c00 	.word	0x40013c00

08001cb0 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4904      	ldr	r1, [pc, #16]	; (8001cd0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]

}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	40013c00 	.word	0x40013c00

08001cd4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	4904      	ldr	r1, [pc, #16]	; (8001cf8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	604b      	str	r3, [r1, #4]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40013c00 	.word	0x40013c00

08001cfc <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	4904      	ldr	r1, [pc, #16]	; (8001d1c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]

}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40013c00 	.word	0x40013c00

08001d20 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	4904      	ldr	r1, [pc, #16]	; (8001d44 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]

}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40013c00 	.word	0x40013c00

08001d48 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	4904      	ldr	r1, [pc, #16]	; (8001d68 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	40013c00 	.word	0x40013c00

08001d6c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	4904      	ldr	r1, [pc, #16]	; (8001d90 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	60cb      	str	r3, [r1, #12]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40013c00 	.word	0x40013c00

08001d94 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	791b      	ldrb	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d065      	beq.n	8001e74 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d06c      	beq.n	8001e8a <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	795b      	ldrb	r3, [r3, #5]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d01c      	beq.n	8001df2 <LL_EXTI_Init+0x5e>
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	dc25      	bgt.n	8001e08 <LL_EXTI_Init+0x74>
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <LL_EXTI_Init+0x32>
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d00b      	beq.n	8001ddc <LL_EXTI_Init+0x48>
 8001dc4:	e020      	b.n	8001e08 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff82 	bl	8001cd4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff45 	bl	8001c64 <LL_EXTI_EnableIT_0_31>
          break;
 8001dda:	e018      	b.n	8001e0e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff51 	bl	8001c88 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff60 	bl	8001cb0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001df0:	e00d      	b.n	8001e0e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff34 	bl	8001c64 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff55 	bl	8001cb0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001e06:	e002      	b.n	8001e0e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
          break;
 8001e0c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	799b      	ldrb	r3, [r3, #6]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d039      	beq.n	8001e8a <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	799b      	ldrb	r3, [r3, #6]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d01c      	beq.n	8001e58 <LL_EXTI_Init+0xc4>
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	dc25      	bgt.n	8001e6e <LL_EXTI_Init+0xda>
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d002      	beq.n	8001e2c <LL_EXTI_Init+0x98>
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d00b      	beq.n	8001e42 <LL_EXTI_Init+0xae>
 8001e2a:	e020      	b.n	8001e6e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff9b 	bl	8001d6c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ff5e 	bl	8001cfc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001e40:	e024      	b.n	8001e8c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff6a 	bl	8001d20 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff79 	bl	8001d48 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001e56:	e019      	b.n	8001e8c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff4d 	bl	8001cfc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ff6e 	bl	8001d48 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001e6c:	e00e      	b.n	8001e8c <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	73fb      	strb	r3, [r7, #15]
            break;
 8001e72:	e00b      	b.n	8001e8c <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff05 	bl	8001c88 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff26 	bl	8001cd4 <LL_EXTI_DisableEvent_0_31>
 8001e88:	e000      	b.n	8001e8c <LL_EXTI_Init+0xf8>
      }
 8001e8a:	bf00      	nop
  }
  return status;
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <LL_GPIO_SetPinMode>:
{
 8001e96:	b480      	push	{r7}
 8001e98:	b089      	sub	sp, #36	; 0x24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	613b      	str	r3, [r7, #16]
  return result;
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2103      	movs	r1, #3
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	61bb      	str	r3, [r7, #24]
  return result;
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	601a      	str	r2, [r3, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	3724      	adds	r7, #36	; 0x24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_GPIO_SetPinOutputType>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	401a      	ands	r2, r3
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	431a      	orrs	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	605a      	str	r2, [r3, #4]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_GPIO_SetPinSpeed>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	613b      	str	r3, [r7, #16]
  return result;
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2103      	movs	r1, #3
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	401a      	ands	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	61bb      	str	r3, [r7, #24]
  return result;
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	431a      	orrs	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	609a      	str	r2, [r3, #8]
}
 8001f76:	bf00      	nop
 8001f78:	3724      	adds	r7, #36	; 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_GPIO_SetPinPull>:
{
 8001f82:	b480      	push	{r7}
 8001f84:	b089      	sub	sp, #36	; 0x24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	613b      	str	r3, [r7, #16]
  return result;
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2103      	movs	r1, #3
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	61bb      	str	r3, [r7, #24]
  return result;
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	60da      	str	r2, [r3, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3724      	adds	r7, #36	; 0x24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_GPIO_SetAFPin_0_7>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a1a      	ldr	r2, [r3, #32]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	613b      	str	r3, [r7, #16]
  return result;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	210f      	movs	r1, #15
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	401a      	ands	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	61bb      	str	r3, [r7, #24]
  return result;
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	431a      	orrs	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	621a      	str	r2, [r3, #32]
}
 8002032:	bf00      	nop
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_GPIO_SetAFPin_8_15>:
{
 800203e:	b480      	push	{r7}
 8002040:	b089      	sub	sp, #36	; 0x24
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	613b      	str	r3, [r7, #16]
  return result;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	210f      	movs	r1, #15
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	401a      	ands	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	61bb      	str	r3, [r7, #24]
  return result;
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	fab3 f383 	clz	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	431a      	orrs	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002094:	bf00      	nop
 8002096:	3724      	adds	r7, #36	; 0x24
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	613b      	str	r3, [r7, #16]
  return result;
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80020ca:	e050      	b.n	800216e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2101      	movs	r1, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d042      	beq.n	8002168 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d003      	beq.n	80020f2 <LL_GPIO_Init+0x52>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d10d      	bne.n	800210e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	461a      	mov	r2, r3
 80020f8:	69b9      	ldr	r1, [r7, #24]
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff ff12 	bl	8001f24 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	461a      	mov	r2, r3
 8002106:	69b9      	ldr	r1, [r7, #24]
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fef3 	bl	8001ef4 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	461a      	mov	r2, r3
 8002114:	69b9      	ldr	r1, [r7, #24]
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ff33 	bl	8001f82 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d11a      	bne.n	800215a <LL_GPIO_Init+0xba>
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	60bb      	str	r3, [r7, #8]
  return result;
 8002130:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b07      	cmp	r3, #7
 800213a:	d807      	bhi.n	800214c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	461a      	mov	r2, r3
 8002142:	69b9      	ldr	r1, [r7, #24]
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff4b 	bl	8001fe0 <LL_GPIO_SetAFPin_0_7>
 800214a:	e006      	b.n	800215a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	461a      	mov	r2, r3
 8002152:	69b9      	ldr	r1, [r7, #24]
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ff72 	bl	800203e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	461a      	mov	r2, r3
 8002160:	69b9      	ldr	r1, [r7, #24]
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff fe97 	bl	8001e96 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	3301      	adds	r3, #1
 800216c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1a7      	bne.n	80020cc <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <LL_RCC_GetSysClkSource>:
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <LL_RCC_GetSysClkSource+0x18>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 030c 	and.w	r3, r3, #12
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800

080021a4 <LL_RCC_GetAHBPrescaler>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <LL_RCC_GetAHBPrescaler+0x18>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800

080021c0 <LL_RCC_GetAPB1Prescaler>:
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800

080021dc <LL_RCC_GetAPB2Prescaler>:
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800

080021f8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <LL_RCC_PLL_GetMainSource+0x18>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800

08002214 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <LL_RCC_PLL_GetN+0x18>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	099b      	lsrs	r3, r3, #6
 800221e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	40023800 	.word	0x40023800

08002230 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <LL_RCC_PLL_GetP+0x18>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800

0800224c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <LL_RCC_PLL_GetDivider+0x18>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800

08002268 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002270:	f000 f820 	bl	80022b4 <RCC_GetSystemClockFreq>
 8002274:	4602      	mov	r2, r0
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f840 	bl	8002304 <RCC_GetHCLKClockFreq>
 8002284:	4602      	mov	r2, r0
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f84e 	bl	8002330 <RCC_GetPCLK1ClockFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f85a 	bl	8002358 <RCC_GetPCLK2ClockFreq>
 80022a4:	4602      	mov	r2, r0
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	60da      	str	r2, [r3, #12]
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80022be:	f7ff ff63 	bl	8002188 <LL_RCC_GetSysClkSource>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d00c      	beq.n	80022e2 <RCC_GetSystemClockFreq+0x2e>
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d80f      	bhi.n	80022ec <RCC_GetSystemClockFreq+0x38>
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <RCC_GetSystemClockFreq+0x22>
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d003      	beq.n	80022dc <RCC_GetSystemClockFreq+0x28>
 80022d4:	e00a      	b.n	80022ec <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <RCC_GetSystemClockFreq+0x48>)
 80022d8:	607b      	str	r3, [r7, #4]
      break;
 80022da:	e00a      	b.n	80022f2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80022dc:	4b08      	ldr	r3, [pc, #32]	; (8002300 <RCC_GetSystemClockFreq+0x4c>)
 80022de:	607b      	str	r3, [r7, #4]
      break;
 80022e0:	e007      	b.n	80022f2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80022e2:	2008      	movs	r0, #8
 80022e4:	f000 f84c 	bl	8002380 <RCC_PLL_GetFreqDomain_SYS>
 80022e8:	6078      	str	r0, [r7, #4]
      break;
 80022ea:	e002      	b.n	80022f2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <RCC_GetSystemClockFreq+0x48>)
 80022ee:	607b      	str	r3, [r7, #4]
      break;
 80022f0:	bf00      	nop
  }

  return frequency;
 80022f2:	687b      	ldr	r3, [r7, #4]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	00f42400 	.word	0x00f42400
 8002300:	007a1200 	.word	0x007a1200

08002304 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800230c:	f7ff ff4a 	bl	80021a4 <LL_RCC_GetAHBPrescaler>
 8002310:	4603      	mov	r3, r0
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <RCC_GetHCLKClockFreq+0x28>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	461a      	mov	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	40d3      	lsrs	r3, r2
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	08002f7c 	.word	0x08002f7c

08002330 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002338:	f7ff ff42 	bl	80021c0 <LL_RCC_GetAPB1Prescaler>
 800233c:	4603      	mov	r3, r0
 800233e:	0a9b      	lsrs	r3, r3, #10
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <RCC_GetPCLK1ClockFreq+0x24>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	461a      	mov	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	40d3      	lsrs	r3, r2
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	08002f8c 	.word	0x08002f8c

08002358 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002360:	f7ff ff3c 	bl	80021dc <LL_RCC_GetAPB2Prescaler>
 8002364:	4603      	mov	r3, r0
 8002366:	0b5b      	lsrs	r3, r3, #13
 8002368:	4a04      	ldr	r2, [pc, #16]	; (800237c <RCC_GetPCLK2ClockFreq+0x24>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	461a      	mov	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	40d3      	lsrs	r3, r2
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	08002f8c 	.word	0x08002f8c

08002380 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	2300      	movs	r3, #0
 8002392:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002394:	f7ff ff30 	bl	80021f8 <LL_RCC_PLL_GetMainSource>
 8002398:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d004      	beq.n	80023aa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023a6:	d003      	beq.n	80023b0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80023a8:	e005      	b.n	80023b6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80023ac:	617b      	str	r3, [r7, #20]
      break;
 80023ae:	e005      	b.n	80023bc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80023b2:	617b      	str	r3, [r7, #20]
      break;
 80023b4:	e002      	b.n	80023bc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80023b8:	617b      	str	r3, [r7, #20]
      break;
 80023ba:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d113      	bne.n	80023ea <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80023c2:	f7ff ff43 	bl	800224c <LL_RCC_PLL_GetDivider>
 80023c6:	4602      	mov	r2, r0
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fbb3 f4f2 	udiv	r4, r3, r2
 80023ce:	f7ff ff21 	bl	8002214 <LL_RCC_PLL_GetN>
 80023d2:	4603      	mov	r3, r0
 80023d4:	fb03 f404 	mul.w	r4, r3, r4
 80023d8:	f7ff ff2a 	bl	8002230 <LL_RCC_PLL_GetP>
 80023dc:	4603      	mov	r3, r0
 80023de:	0c1b      	lsrs	r3, r3, #16
 80023e0:	3301      	adds	r3, #1
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fbb4 f3f3 	udiv	r3, r4, r3
 80023e8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80023ea:	693b      	ldr	r3, [r7, #16]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd90      	pop	{r4, r7, pc}
 80023f4:	00f42400 	.word	0x00f42400
 80023f8:	007a1200 	.word	0x007a1200

080023fc <LL_TIM_SetPrescaler>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_TIM_SetAutoReload>:
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_TIM_SetRepetitionCounter>:
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	615a      	str	r2, [r3, #20]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a31      	ldr	r2, [pc, #196]	; (8002548 <LL_TIM_Init+0xd8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00f      	beq.n	80024a8 <LL_TIM_Init+0x38>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248e:	d00b      	beq.n	80024a8 <LL_TIM_Init+0x38>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a2e      	ldr	r2, [pc, #184]	; (800254c <LL_TIM_Init+0xdc>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <LL_TIM_Init+0x38>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a2d      	ldr	r2, [pc, #180]	; (8002550 <LL_TIM_Init+0xe0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <LL_TIM_Init+0x38>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a2c      	ldr	r2, [pc, #176]	; (8002554 <LL_TIM_Init+0xe4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d106      	bne.n	80024b6 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a23      	ldr	r2, [pc, #140]	; (8002548 <LL_TIM_Init+0xd8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d01b      	beq.n	80024f6 <LL_TIM_Init+0x86>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c4:	d017      	beq.n	80024f6 <LL_TIM_Init+0x86>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a20      	ldr	r2, [pc, #128]	; (800254c <LL_TIM_Init+0xdc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <LL_TIM_Init+0x86>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a1f      	ldr	r2, [pc, #124]	; (8002550 <LL_TIM_Init+0xe0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00f      	beq.n	80024f6 <LL_TIM_Init+0x86>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <LL_TIM_Init+0xe4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00b      	beq.n	80024f6 <LL_TIM_Init+0x86>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <LL_TIM_Init+0xe8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <LL_TIM_Init+0x86>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a1c      	ldr	r2, [pc, #112]	; (800255c <LL_TIM_Init+0xec>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d003      	beq.n	80024f6 <LL_TIM_Init+0x86>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a1b      	ldr	r2, [pc, #108]	; (8002560 <LL_TIM_Init+0xf0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d106      	bne.n	8002504 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4619      	mov	r1, r3
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ff81 	bl	8002418 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	4619      	mov	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff6d 	bl	80023fc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a08      	ldr	r2, [pc, #32]	; (8002548 <LL_TIM_Init+0xd8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d105      	bne.n	8002536 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	4619      	mov	r1, r3
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff7f 	bl	8002434 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ff8a 	bl	8002450 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40010000 	.word	0x40010000
 800254c:	40000400 	.word	0x40000400
 8002550:	40000800 	.word	0x40000800
 8002554:	40000c00 	.word	0x40000c00
 8002558:	40014000 	.word	0x40014000
 800255c:	40014400 	.word	0x40014400
 8002560:	40014800 	.word	0x40014800

08002564 <LL_USART_IsEnabled>:
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002578:	bf0c      	ite	eq
 800257a:	2301      	moveq	r3, #1
 800257c:	2300      	movne	r3, #0
 800257e:	b2db      	uxtb	r3, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_USART_SetStopBitsLength>:
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	611a      	str	r2, [r3, #16]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_USART_SetHWFlowCtrl>:
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	615a      	str	r2, [r3, #20]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <LL_USART_SetBaudRate>:
{
 80025d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025dc:	b09f      	sub	sp, #124	; 0x7c
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6778      	str	r0, [r7, #116]	; 0x74
 80025e2:	6739      	str	r1, [r7, #112]	; 0x70
 80025e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025e6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80025e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ee:	f040 80bc 	bne.w	800276a <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80025f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025f4:	461c      	mov	r4, r3
 80025f6:	f04f 0500 	mov.w	r5, #0
 80025fa:	4622      	mov	r2, r4
 80025fc:	462b      	mov	r3, r5
 80025fe:	eb12 0a02 	adds.w	sl, r2, r2
 8002602:	eb43 0b03 	adc.w	fp, r3, r3
 8002606:	4652      	mov	r2, sl
 8002608:	465b      	mov	r3, fp
 800260a:	1912      	adds	r2, r2, r4
 800260c:	eb45 0303 	adc.w	r3, r5, r3
 8002610:	f04f 0000 	mov.w	r0, #0
 8002614:	f04f 0100 	mov.w	r1, #0
 8002618:	00d9      	lsls	r1, r3, #3
 800261a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800261e:	00d0      	lsls	r0, r2, #3
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	1911      	adds	r1, r2, r4
 8002626:	6639      	str	r1, [r7, #96]	; 0x60
 8002628:	416b      	adcs	r3, r5
 800262a:	667b      	str	r3, [r7, #100]	; 0x64
 800262c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800262e:	461a      	mov	r2, r3
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	1891      	adds	r1, r2, r2
 8002636:	6339      	str	r1, [r7, #48]	; 0x30
 8002638:	415b      	adcs	r3, r3
 800263a:	637b      	str	r3, [r7, #52]	; 0x34
 800263c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002640:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002644:	f7fd fdc8 	bl	80001d8 <__aeabi_uldivmod>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4ba9      	ldr	r3, [pc, #676]	; (80028f4 <LL_USART_SetBaudRate+0x31c>)
 800264e:	fba3 2302 	umull	r2, r3, r3, r2
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	b29b      	uxth	r3, r3
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	b29e      	uxth	r6, r3
 800265a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800265c:	461c      	mov	r4, r3
 800265e:	f04f 0500 	mov.w	r5, #0
 8002662:	4622      	mov	r2, r4
 8002664:	462b      	mov	r3, r5
 8002666:	1891      	adds	r1, r2, r2
 8002668:	62b9      	str	r1, [r7, #40]	; 0x28
 800266a:	415b      	adcs	r3, r3
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800266e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002672:	1912      	adds	r2, r2, r4
 8002674:	eb45 0303 	adc.w	r3, r5, r3
 8002678:	f04f 0000 	mov.w	r0, #0
 800267c:	f04f 0100 	mov.w	r1, #0
 8002680:	00d9      	lsls	r1, r3, #3
 8002682:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002686:	00d0      	lsls	r0, r2, #3
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	1911      	adds	r1, r2, r4
 800268e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002690:	416b      	adcs	r3, r5
 8002692:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002694:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002696:	461a      	mov	r2, r3
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	1891      	adds	r1, r2, r2
 800269e:	6239      	str	r1, [r7, #32]
 80026a0:	415b      	adcs	r3, r3
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
 80026a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026a8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80026ac:	f7fd fd94 	bl	80001d8 <__aeabi_uldivmod>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4b8f      	ldr	r3, [pc, #572]	; (80028f4 <LL_USART_SetBaudRate+0x31c>)
 80026b6:	fba3 1302 	umull	r1, r3, r3, r2
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	2164      	movs	r1, #100	; 0x64
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	3332      	adds	r3, #50	; 0x32
 80026c8:	4a8a      	ldr	r2, [pc, #552]	; (80028f4 <LL_USART_SetBaudRate+0x31c>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026da:	b29b      	uxth	r3, r3
 80026dc:	4433      	add	r3, r6
 80026de:	b29e      	uxth	r6, r3
 80026e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026e2:	4618      	mov	r0, r3
 80026e4:	f04f 0100 	mov.w	r1, #0
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	1894      	adds	r4, r2, r2
 80026ee:	61bc      	str	r4, [r7, #24]
 80026f0:	415b      	adcs	r3, r3
 80026f2:	61fb      	str	r3, [r7, #28]
 80026f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026f8:	1812      	adds	r2, r2, r0
 80026fa:	eb41 0303 	adc.w	r3, r1, r3
 80026fe:	f04f 0400 	mov.w	r4, #0
 8002702:	f04f 0500 	mov.w	r5, #0
 8002706:	00dd      	lsls	r5, r3, #3
 8002708:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800270c:	00d4      	lsls	r4, r2, #3
 800270e:	4622      	mov	r2, r4
 8002710:	462b      	mov	r3, r5
 8002712:	1814      	adds	r4, r2, r0
 8002714:	653c      	str	r4, [r7, #80]	; 0x50
 8002716:	414b      	adcs	r3, r1
 8002718:	657b      	str	r3, [r7, #84]	; 0x54
 800271a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800271c:	461a      	mov	r2, r3
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	1891      	adds	r1, r2, r2
 8002724:	6139      	str	r1, [r7, #16]
 8002726:	415b      	adcs	r3, r3
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800272e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002732:	f7fd fd51 	bl	80001d8 <__aeabi_uldivmod>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4b6e      	ldr	r3, [pc, #440]	; (80028f4 <LL_USART_SetBaudRate+0x31c>)
 800273c:	fba3 1302 	umull	r1, r3, r3, r2
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	2164      	movs	r1, #100	; 0x64
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	3332      	adds	r3, #50	; 0x32
 800274e:	4a69      	ldr	r2, [pc, #420]	; (80028f4 <LL_USART_SetBaudRate+0x31c>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	b29b      	uxth	r3, r3
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	b29b      	uxth	r3, r3
 800275e:	4433      	add	r3, r6
 8002760:	b29b      	uxth	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002766:	609a      	str	r2, [r3, #8]
}
 8002768:	e0be      	b.n	80028e8 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800276a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800276c:	461c      	mov	r4, r3
 800276e:	f04f 0500 	mov.w	r5, #0
 8002772:	4622      	mov	r2, r4
 8002774:	462b      	mov	r3, r5
 8002776:	eb12 0802 	adds.w	r8, r2, r2
 800277a:	eb43 0903 	adc.w	r9, r3, r3
 800277e:	4642      	mov	r2, r8
 8002780:	464b      	mov	r3, r9
 8002782:	1912      	adds	r2, r2, r4
 8002784:	eb45 0303 	adc.w	r3, r5, r3
 8002788:	f04f 0000 	mov.w	r0, #0
 800278c:	f04f 0100 	mov.w	r1, #0
 8002790:	00d9      	lsls	r1, r3, #3
 8002792:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002796:	00d0      	lsls	r0, r2, #3
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	1911      	adds	r1, r2, r4
 800279e:	64b9      	str	r1, [r7, #72]	; 0x48
 80027a0:	416b      	adcs	r3, r5
 80027a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027a6:	4618      	mov	r0, r3
 80027a8:	f04f 0100 	mov.w	r1, #0
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	008b      	lsls	r3, r1, #2
 80027b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027ba:	0082      	lsls	r2, r0, #2
 80027bc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80027c0:	f7fd fd0a 	bl	80001d8 <__aeabi_uldivmod>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4b4a      	ldr	r3, [pc, #296]	; (80028f4 <LL_USART_SetBaudRate+0x31c>)
 80027ca:	fba3 2302 	umull	r2, r3, r3, r2
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	b29e      	uxth	r6, r3
 80027d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d8:	4618      	mov	r0, r3
 80027da:	f04f 0100 	mov.w	r1, #0
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	1894      	adds	r4, r2, r2
 80027e4:	60bc      	str	r4, [r7, #8]
 80027e6:	415b      	adcs	r3, r3
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027ee:	1812      	adds	r2, r2, r0
 80027f0:	eb41 0303 	adc.w	r3, r1, r3
 80027f4:	f04f 0400 	mov.w	r4, #0
 80027f8:	f04f 0500 	mov.w	r5, #0
 80027fc:	00dd      	lsls	r5, r3, #3
 80027fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002802:	00d4      	lsls	r4, r2, #3
 8002804:	4622      	mov	r2, r4
 8002806:	462b      	mov	r3, r5
 8002808:	1814      	adds	r4, r2, r0
 800280a:	643c      	str	r4, [r7, #64]	; 0x40
 800280c:	414b      	adcs	r3, r1
 800280e:	647b      	str	r3, [r7, #68]	; 0x44
 8002810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002812:	4618      	mov	r0, r3
 8002814:	f04f 0100 	mov.w	r1, #0
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	008b      	lsls	r3, r1, #2
 8002822:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002826:	0082      	lsls	r2, r0, #2
 8002828:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800282c:	f7fd fcd4 	bl	80001d8 <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <LL_USART_SetBaudRate+0x31c>)
 8002836:	fba3 1302 	umull	r1, r3, r3, r2
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	2164      	movs	r1, #100	; 0x64
 800283e:	fb01 f303 	mul.w	r3, r1, r3
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	3332      	adds	r3, #50	; 0x32
 8002848:	4a2a      	ldr	r2, [pc, #168]	; (80028f4 <LL_USART_SetBaudRate+0x31c>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	b29b      	uxth	r3, r3
 8002852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002856:	b29b      	uxth	r3, r3
 8002858:	4433      	add	r3, r6
 800285a:	b29e      	uxth	r6, r3
 800285c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800285e:	4618      	mov	r0, r3
 8002860:	f04f 0100 	mov.w	r1, #0
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	1894      	adds	r4, r2, r2
 800286a:	603c      	str	r4, [r7, #0]
 800286c:	415b      	adcs	r3, r3
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002874:	1812      	adds	r2, r2, r0
 8002876:	eb41 0303 	adc.w	r3, r1, r3
 800287a:	f04f 0400 	mov.w	r4, #0
 800287e:	f04f 0500 	mov.w	r5, #0
 8002882:	00dd      	lsls	r5, r3, #3
 8002884:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002888:	00d4      	lsls	r4, r2, #3
 800288a:	4622      	mov	r2, r4
 800288c:	462b      	mov	r3, r5
 800288e:	1814      	adds	r4, r2, r0
 8002890:	63bc      	str	r4, [r7, #56]	; 0x38
 8002892:	414b      	adcs	r3, r1
 8002894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002898:	4618      	mov	r0, r3
 800289a:	f04f 0100 	mov.w	r1, #0
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	008b      	lsls	r3, r1, #2
 80028a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028ac:	0082      	lsls	r2, r0, #2
 80028ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80028b2:	f7fd fc91 	bl	80001d8 <__aeabi_uldivmod>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <LL_USART_SetBaudRate+0x31c>)
 80028bc:	fba3 1302 	umull	r1, r3, r3, r2
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	2164      	movs	r1, #100	; 0x64
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	3332      	adds	r3, #50	; 0x32
 80028ce:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <LL_USART_SetBaudRate+0x31c>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	095b      	lsrs	r3, r3, #5
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	b29b      	uxth	r3, r3
 80028de:	4433      	add	r3, r6
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e6:	609a      	str	r2, [r3, #8]
}
 80028e8:	bf00      	nop
 80028ea:	377c      	adds	r7, #124	; 0x7c
 80028ec:	46bd      	mov	sp, r7
 80028ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028f2:	bf00      	nop
 80028f4:	51eb851f 	.word	0x51eb851f

080028f8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff fe2a 	bl	8002564 <LL_USART_IsEnabled>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d149      	bne.n	80029aa <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800291e:	f023 030c 	bic.w	r3, r3, #12
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	6851      	ldr	r1, [r2, #4]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	68d2      	ldr	r2, [r2, #12]
 800292a:	4311      	orrs	r1, r2
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	6912      	ldr	r2, [r2, #16]
 8002930:	4311      	orrs	r1, r2
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	6992      	ldr	r2, [r2, #24]
 8002936:	430a      	orrs	r2, r1
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	4619      	mov	r1, r3
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff fe21 	bl	800258c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	4619      	mov	r1, r3
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff fe2e 	bl	80025b2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002956:	f107 0308 	add.w	r3, r7, #8
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fc84 	bl	8002268 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <LL_USART_Init+0xbc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d102      	bne.n	800296e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	e00c      	b.n	8002988 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a11      	ldr	r2, [pc, #68]	; (80029b8 <LL_USART_Init+0xc0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d102      	bne.n	800297c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	e005      	b.n	8002988 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a0f      	ldr	r2, [pc, #60]	; (80029bc <LL_USART_Init+0xc4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d101      	bne.n	8002988 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00d      	beq.n	80029aa <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8002996:	2300      	movs	r3, #0
 8002998:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69b9      	ldr	r1, [r7, #24]
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff fe17 	bl	80025d8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80029aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40011000 	.word	0x40011000
 80029b8:	40004400 	.word	0x40004400
 80029bc:	40011400 	.word	0x40011400

080029c0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d2:	4a07      	ldr	r2, [pc, #28]	; (80029f0 <LL_InitTick+0x30>)
 80029d4:	3b01      	subs	r3, #1
 80029d6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <LL_InitTick+0x30>)
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029de:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <LL_InitTick+0x30>)
 80029e0:	2205      	movs	r2, #5
 80029e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000e010 	.word	0xe000e010

080029f4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80029fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ffdd 	bl	80029c0 <LL_InitTick>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <LL_SetSystemCoreClock+0x1c>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6013      	str	r3, [r2, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000000 	.word	0x20000000

08002a30 <oneshotInit>:
  * @brief  Init Oneshot module
  * @param	*os : Oneshot pointer will be initialized.
  * @retval None
  */
void oneshotInit(oneshot_t *os)
{
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	tick_t time_now;

    oneshot_t *osp = NULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

    time_now = LTOS_getTick();
 8002a3c:	f000 f94e 	bl	8002cdc <LTOS_getTick>
 8002a40:	e9c7 0102 	strd	r0, r1, [r7, #8]

#ifdef LTOS_MAGIC
    os->magic = LTOS_MAGIC;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <oneshotInit+0x88>)
 8002a48:	601a      	str	r2, [r3, #0]
#endif
	os->callback = NULL;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	621a      	str	r2, [r3, #32]
	os->arg = 0;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
#ifdef LTOS_GARBAGE_COLL_TOUT
	os->killTm	= time_now + LTOS_GARBAGE_COLL_TOUT;
 8002a56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a5a:	a115      	add	r1, pc, #84	; (adr r1, 8002ab0 <oneshotInit+0x80>)
 8002a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a60:	1814      	adds	r4, r2, r0
 8002a62:	eb43 0501 	adc.w	r5, r3, r1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	e9c3 4504 	strd	r4, r5, [r3, #16]
#endif
	os->isEnabled = false;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	771a      	strb	r2, [r3, #28]
	os->isOverflowed = false;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	775a      	strb	r2, [r3, #29]
	os->nosp = NULL;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24
    
    if(os != fosp) {                // if this onceall is not first oneshot..
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <oneshotInit+0x8c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d00e      	beq.n	8002aa6 <oneshotInit+0x76>
    	osp = fosp;
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <oneshotInit+0x8c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	617b      	str	r3, [r7, #20]
		while(1) {
            if(osp->nosp !=  NULL) {
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <oneshotInit+0x6e>
                osp = osp->nosp;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	617b      	str	r3, [r7, #20]
            if(osp->nosp !=  NULL) {
 8002a9c:	e7f7      	b.n	8002a8e <oneshotInit+0x5e>
            } else {
				break;
 8002a9e:	bf00      	nop
			}
        }
        osp->nosp = os;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24
    }
}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bdb0      	pop	{r4, r5, r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	d693a400 	.word	0xd693a400
 8002ab4:	00000000 	.word	0x00000000
 8002ab8:	4c564e54 	.word	0x4c564e54
 8002abc:	20000318 	.word	0x20000318

08002ac0 <oneshotFree>:
  * @brief  Free Oneshot
  * @param	os : oneshot pointer will be free
  * @retval None
  */
void oneshotFree(oneshot_t *os)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
    oneshot_t   *osp = NULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]

	osp = fosp;
 8002acc:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <oneshotFree+0x50>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60fb      	str	r3, [r7, #12]
    if(osp == os) {
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d104      	bne.n	8002ae4 <oneshotFree+0x24>
        fosp = os->nosp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	4a0c      	ldr	r2, [pc, #48]	; (8002b10 <oneshotFree+0x50>)
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e00d      	b.n	8002b00 <oneshotFree+0x40>
    } else {
        while(1) {						// link current os's next os pointer to previous os's next pointer
            if(osp->nosp == os) {
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d104      	bne.n	8002af8 <oneshotFree+0x38>
                osp->nosp = os->nosp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24
                break;
 8002af6:	e003      	b.n	8002b00 <oneshotFree+0x40>
            } else {
            	osp = osp->nosp;		// skip to next os
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	60fb      	str	r3, [r7, #12]
            if(osp->nosp == os) {
 8002afe:	e7f1      	b.n	8002ae4 <oneshotFree+0x24>
            }
        }
    }
    free(os);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f94d 	bl	8002da0 <free>
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000318 	.word	0x20000318

08002b14 <LTOS_run>:
  * @param	None
  * @retval result:
  * 		1- LTOS_ERR_MAGIC_CRASH
  */
ltosError_t LTOS_run(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
    oneshot_t *os = NULL,
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
    		  *nos= NULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	613b      	str	r3, [r7, #16]

	tick_t tickNow = 0x00;
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	e9c7 2300 	strd	r2, r3, [r7]

	ltosError_t err = LTOS_ERR_NONE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]

	os = fosp;
 8002b32:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <LTOS_run+0xe0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	617b      	str	r3, [r7, #20]

	while(err == LTOS_ERR_NONE) {
 8002b38:	e054      	b.n	8002be4 <LTOS_run+0xd0>
#ifdef LTOS_MAGIC
        if(os->magic != LTOS_MAGIC) {
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a2e      	ldr	r2, [pc, #184]	; (8002bf8 <LTOS_run+0xe4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d001      	beq.n	8002b48 <LTOS_run+0x34>
            err = LTOS_ERR_MAGIC_CRASH;  // there is memory crash, stop execution..
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
        }
#endif
		tickNow = LTOS_getTick();
 8002b48:	f000 f8c8 	bl	8002cdc <LTOS_getTick>
 8002b4c:	e9c7 0100 	strd	r0, r1, [r7]
		if(!os->isEnabled) {
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	7f1b      	ldrb	r3, [r3, #28]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d119      	bne.n	8002b8c <LTOS_run+0x78>
			// Find next oneshot
            if(os->nosp == NULL) {
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d103      	bne.n	8002b68 <LTOS_run+0x54>
            	nos = fosp;
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <LTOS_run+0xe0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	e002      	b.n	8002b6e <LTOS_run+0x5a>
            } else {
        		nos = os->nosp;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	613b      	str	r3, [r7, #16]
            }
            // Garbage collection
#ifdef LTOS_GARBAGE_COLL_TOUT
        	if(os->killTm <= tickNow) {
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002b74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b78:	4299      	cmp	r1, r3
 8002b7a:	bf08      	it	eq
 8002b7c:	4290      	cmpeq	r0, r2
 8002b7e:	d302      	bcc.n	8002b86 <LTOS_run+0x72>
        		oneshotFree(os);
 8002b80:	6978      	ldr	r0, [r7, #20]
 8002b82:	f7ff ff9d 	bl	8002ac0 <oneshotFree>
        	}
#endif
        	// Jump to next oneshot
        	os = nos;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	617b      	str	r3, [r7, #20]
			continue;
 8002b8a:	e02b      	b.n	8002be4 <LTOS_run+0xd0>
		}
		// Execute callback if its time elapsed
		if(tickNow >= os->endTick) {
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b96:	4299      	cmp	r1, r3
 8002b98:	bf08      	it	eq
 8002b9a:	4290      	cmpeq	r0, r2
 8002b9c:	d30b      	bcc.n	8002bb6 <LTOS_run+0xa2>
			os->isOverflowed= true;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	775a      	strb	r2, [r3, #29]
			os->isEnabled 	= false;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	771a      	strb	r2, [r3, #28]
            os->callback(os->arg);
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	6992      	ldr	r2, [r2, #24]
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4798      	blx	r3
		}
		// Find next oneshot
        if(os->nosp !=  NULL) 	{ os = os->nosp; }
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <LTOS_run+0xb2>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	e002      	b.n	8002bcc <LTOS_run+0xb8>
        else 					{ os = fosp;     }
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <LTOS_run+0xe0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	617b      	str	r3, [r7, #20]
        // Free oneshot if requested by user
        if(dosp) {
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <LTOS_run+0xe8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <LTOS_run+0xd0>
        	oneshotFree(dosp);
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <LTOS_run+0xe8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff71 	bl	8002ac0 <oneshotFree>
        	dosp = NULL;
 8002bde:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <LTOS_run+0xe8>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
	while(err == LTOS_ERR_NONE) {
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0a7      	beq.n	8002b3a <LTOS_run+0x26>
        }
	}
    
    return err;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000318 	.word	0x20000318
 8002bf8:	4c564e54 	.word	0x4c564e54
 8002bfc:	2000031c 	.word	0x2000031c

08002c00 <LTOS_oneshotAttach>:
  * 		0- LTOS_ERR_NONE
  * 		1- LTOS_ERR_MAGIC_CRASH
  * 		2- LTOS_ERR_INVALID_PTR
  */
ltosError_t LTOS_oneshotAttach(oneshot_t *os, os_callback_t fp, uint32_t arg, tick_t tout)
{
 8002c00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
	tick_t time_now = 0x00;
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if((os == NULL) || (fp == NULL)) {
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <LTOS_oneshotAttach+0x26>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <LTOS_oneshotAttach+0x2a>
		return LTOS_ERR_INVALID_PTR;
 8002c26:	2302      	movs	r3, #2
 8002c28:	e02d      	b.n	8002c86 <LTOS_oneshotAttach+0x86>
	}
#ifdef LTOS_MAGIC
    if(os->magic != LTOS_MAGIC) {
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a1a      	ldr	r2, [pc, #104]	; (8002c98 <LTOS_oneshotAttach+0x98>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d001      	beq.n	8002c38 <LTOS_oneshotAttach+0x38>
        return LTOS_ERR_MAGIC_CRASH;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e026      	b.n	8002c86 <LTOS_oneshotAttach+0x86>
    }
#endif

    time_now 		= LTOS_getTick();
 8002c38:	f000 f850 	bl	8002cdc <LTOS_getTick>
 8002c3c:	e9c7 0104 	strd	r0, r1, [r7, #16]
	os->endTick 	= time_now + tout;
 8002c40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c48:	eb10 0802 	adds.w	r8, r0, r2
 8002c4c:	eb41 0903 	adc.w	r9, r1, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	e9c3 8902 	strd	r8, r9, [r3, #8]
#ifdef LTOS_GARBAGE_COLL_TOUT
	os->killTm		= time_now + LTOS_GARBAGE_COLL_TOUT;
 8002c56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c5a:	a10d      	add	r1, pc, #52	; (adr r1, 8002c90 <LTOS_oneshotAttach+0x90>)
 8002c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c60:	1814      	adds	r4, r2, r0
 8002c62:	eb43 0501 	adc.w	r5, r3, r1
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	e9c3 4504 	strd	r4, r5, [r3, #16]
#endif
	os->callback 	= fp;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	621a      	str	r2, [r3, #32]
	os->arg 		= arg;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	619a      	str	r2, [r3, #24]
	os->isEnabled 	= true;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	771a      	strb	r2, [r3, #28]
   	os->isOverflowed= false;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	775a      	strb	r2, [r3, #29]

	return LTOS_ERR_NONE;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c90:	d693a400 	.word	0xd693a400
 8002c94:	00000000 	.word	0x00000000
 8002c98:	4c564e54 	.word	0x4c564e54

08002c9c <LTOS_oneshotAlloc>:
  * @brief  Allocate new Oneshot
  * @param	None
  * @retval Oneshot pointer if allocated else NULL
  */
oneshot_t *LTOS_oneshotAlloc(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
    oneshot_t *os = NULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	607b      	str	r3, [r7, #4]

    os = malloc(sizeof(oneshot_t));
 8002ca6:	2028      	movs	r0, #40	; 0x28
 8002ca8:	f000 f872 	bl	8002d90 <malloc>
 8002cac:	4603      	mov	r3, r0
 8002cae:	607b      	str	r3, [r7, #4]
    if(!os) {                               // no free space on heap for oneshot allocation!
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <LTOS_oneshotAlloc+0x1e>
        return NULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e00a      	b.n	8002cd0 <LTOS_oneshotAlloc+0x34>
    }

    if( fosp == NULL ) {                    // if this oneshot is first oneshot, save this address..
 8002cba:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <LTOS_oneshotAlloc+0x3c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d102      	bne.n	8002cc8 <LTOS_oneshotAlloc+0x2c>
        fosp = os;
 8002cc2:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <LTOS_oneshotAlloc+0x3c>)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6013      	str	r3, [r2, #0]
    }
    oneshotInit(os);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff feb1 	bl	8002a30 <oneshotInit>

    return os;
 8002cce:	687b      	ldr	r3, [r7, #4]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000318 	.word	0x20000318

08002cdc <LTOS_getTick>:
  * @brief  Get tick count
  * @param	None
  * @retval None
  */
tick_t LTOS_getTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
	tick_t preTick;

	while(preTick != tick) {
 8002ce2:	e004      	b.n	8002cee <LTOS_getTick+0x12>
		preTick = tick;
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <LTOS_getTick+0x38>)
 8002ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cea:	e9c7 2300 	strd	r2, r3, [r7]
	while(preTick != tick) {
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <LTOS_getTick+0x38>)
 8002cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cf8:	4299      	cmp	r1, r3
 8002cfa:	bf08      	it	eq
 8002cfc:	4290      	cmpeq	r0, r2
 8002cfe:	d1f1      	bne.n	8002ce4 <LTOS_getTick+0x8>
	}

	return preTick;
 8002d00:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000320 	.word	0x20000320

08002d18 <LTOS_tickIncrease>:
  * @brief  Increase tick count
  * @param	None
  * @retval None
  */
void LTOS_tickIncrease(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
	tick++;
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <LTOS_tickIncrease+0x20>)
 8002d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d22:	1c50      	adds	r0, r2, #1
 8002d24:	f143 0100 	adc.w	r1, r3, #0
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <LTOS_tickIncrease+0x20>)
 8002d2a:	e9c3 0100 	strd	r0, r1, [r3]
}
 8002d2e:	bf00      	nop
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	20000320 	.word	0x20000320

08002d3c <__errno>:
 8002d3c:	4b01      	ldr	r3, [pc, #4]	; (8002d44 <__errno+0x8>)
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000028 	.word	0x20000028

08002d48 <__libc_init_array>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	4d0d      	ldr	r5, [pc, #52]	; (8002d80 <__libc_init_array+0x38>)
 8002d4c:	4c0d      	ldr	r4, [pc, #52]	; (8002d84 <__libc_init_array+0x3c>)
 8002d4e:	1b64      	subs	r4, r4, r5
 8002d50:	10a4      	asrs	r4, r4, #2
 8002d52:	2600      	movs	r6, #0
 8002d54:	42a6      	cmp	r6, r4
 8002d56:	d109      	bne.n	8002d6c <__libc_init_array+0x24>
 8002d58:	4d0b      	ldr	r5, [pc, #44]	; (8002d88 <__libc_init_array+0x40>)
 8002d5a:	4c0c      	ldr	r4, [pc, #48]	; (8002d8c <__libc_init_array+0x44>)
 8002d5c:	f000 f8fe 	bl	8002f5c <_init>
 8002d60:	1b64      	subs	r4, r4, r5
 8002d62:	10a4      	asrs	r4, r4, #2
 8002d64:	2600      	movs	r6, #0
 8002d66:	42a6      	cmp	r6, r4
 8002d68:	d105      	bne.n	8002d76 <__libc_init_array+0x2e>
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d70:	4798      	blx	r3
 8002d72:	3601      	adds	r6, #1
 8002d74:	e7ee      	b.n	8002d54 <__libc_init_array+0xc>
 8002d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7a:	4798      	blx	r3
 8002d7c:	3601      	adds	r6, #1
 8002d7e:	e7f2      	b.n	8002d66 <__libc_init_array+0x1e>
 8002d80:	08002fa4 	.word	0x08002fa4
 8002d84:	08002fa4 	.word	0x08002fa4
 8002d88:	08002fa4 	.word	0x08002fa4
 8002d8c:	08002fa8 	.word	0x08002fa8

08002d90 <malloc>:
 8002d90:	4b02      	ldr	r3, [pc, #8]	; (8002d9c <malloc+0xc>)
 8002d92:	4601      	mov	r1, r0
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	f000 b869 	b.w	8002e6c <_malloc_r>
 8002d9a:	bf00      	nop
 8002d9c:	20000028 	.word	0x20000028

08002da0 <free>:
 8002da0:	4b02      	ldr	r3, [pc, #8]	; (8002dac <free+0xc>)
 8002da2:	4601      	mov	r1, r0
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	f000 b811 	b.w	8002dcc <_free_r>
 8002daa:	bf00      	nop
 8002dac:	20000028 	.word	0x20000028

08002db0 <memcpy>:
 8002db0:	440a      	add	r2, r1
 8002db2:	4291      	cmp	r1, r2
 8002db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002db8:	d100      	bne.n	8002dbc <memcpy+0xc>
 8002dba:	4770      	bx	lr
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002dc6:	4291      	cmp	r1, r2
 8002dc8:	d1f9      	bne.n	8002dbe <memcpy+0xe>
 8002dca:	bd10      	pop	{r4, pc}

08002dcc <_free_r>:
 8002dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002dce:	2900      	cmp	r1, #0
 8002dd0:	d048      	beq.n	8002e64 <_free_r+0x98>
 8002dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dd6:	9001      	str	r0, [sp, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f1a1 0404 	sub.w	r4, r1, #4
 8002dde:	bfb8      	it	lt
 8002de0:	18e4      	addlt	r4, r4, r3
 8002de2:	f000 f8ad 	bl	8002f40 <__malloc_lock>
 8002de6:	4a20      	ldr	r2, [pc, #128]	; (8002e68 <_free_r+0x9c>)
 8002de8:	9801      	ldr	r0, [sp, #4]
 8002dea:	6813      	ldr	r3, [r2, #0]
 8002dec:	4615      	mov	r5, r2
 8002dee:	b933      	cbnz	r3, 8002dfe <_free_r+0x32>
 8002df0:	6063      	str	r3, [r4, #4]
 8002df2:	6014      	str	r4, [r2, #0]
 8002df4:	b003      	add	sp, #12
 8002df6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002dfa:	f000 b8a7 	b.w	8002f4c <__malloc_unlock>
 8002dfe:	42a3      	cmp	r3, r4
 8002e00:	d90b      	bls.n	8002e1a <_free_r+0x4e>
 8002e02:	6821      	ldr	r1, [r4, #0]
 8002e04:	1862      	adds	r2, r4, r1
 8002e06:	4293      	cmp	r3, r2
 8002e08:	bf04      	itt	eq
 8002e0a:	681a      	ldreq	r2, [r3, #0]
 8002e0c:	685b      	ldreq	r3, [r3, #4]
 8002e0e:	6063      	str	r3, [r4, #4]
 8002e10:	bf04      	itt	eq
 8002e12:	1852      	addeq	r2, r2, r1
 8002e14:	6022      	streq	r2, [r4, #0]
 8002e16:	602c      	str	r4, [r5, #0]
 8002e18:	e7ec      	b.n	8002df4 <_free_r+0x28>
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	b10b      	cbz	r3, 8002e24 <_free_r+0x58>
 8002e20:	42a3      	cmp	r3, r4
 8002e22:	d9fa      	bls.n	8002e1a <_free_r+0x4e>
 8002e24:	6811      	ldr	r1, [r2, #0]
 8002e26:	1855      	adds	r5, r2, r1
 8002e28:	42a5      	cmp	r5, r4
 8002e2a:	d10b      	bne.n	8002e44 <_free_r+0x78>
 8002e2c:	6824      	ldr	r4, [r4, #0]
 8002e2e:	4421      	add	r1, r4
 8002e30:	1854      	adds	r4, r2, r1
 8002e32:	42a3      	cmp	r3, r4
 8002e34:	6011      	str	r1, [r2, #0]
 8002e36:	d1dd      	bne.n	8002df4 <_free_r+0x28>
 8002e38:	681c      	ldr	r4, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	6053      	str	r3, [r2, #4]
 8002e3e:	4421      	add	r1, r4
 8002e40:	6011      	str	r1, [r2, #0]
 8002e42:	e7d7      	b.n	8002df4 <_free_r+0x28>
 8002e44:	d902      	bls.n	8002e4c <_free_r+0x80>
 8002e46:	230c      	movs	r3, #12
 8002e48:	6003      	str	r3, [r0, #0]
 8002e4a:	e7d3      	b.n	8002df4 <_free_r+0x28>
 8002e4c:	6825      	ldr	r5, [r4, #0]
 8002e4e:	1961      	adds	r1, r4, r5
 8002e50:	428b      	cmp	r3, r1
 8002e52:	bf04      	itt	eq
 8002e54:	6819      	ldreq	r1, [r3, #0]
 8002e56:	685b      	ldreq	r3, [r3, #4]
 8002e58:	6063      	str	r3, [r4, #4]
 8002e5a:	bf04      	itt	eq
 8002e5c:	1949      	addeq	r1, r1, r5
 8002e5e:	6021      	streq	r1, [r4, #0]
 8002e60:	6054      	str	r4, [r2, #4]
 8002e62:	e7c7      	b.n	8002df4 <_free_r+0x28>
 8002e64:	b003      	add	sp, #12
 8002e66:	bd30      	pop	{r4, r5, pc}
 8002e68:	20000328 	.word	0x20000328

08002e6c <_malloc_r>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	1ccd      	adds	r5, r1, #3
 8002e70:	f025 0503 	bic.w	r5, r5, #3
 8002e74:	3508      	adds	r5, #8
 8002e76:	2d0c      	cmp	r5, #12
 8002e78:	bf38      	it	cc
 8002e7a:	250c      	movcc	r5, #12
 8002e7c:	2d00      	cmp	r5, #0
 8002e7e:	4606      	mov	r6, r0
 8002e80:	db01      	blt.n	8002e86 <_malloc_r+0x1a>
 8002e82:	42a9      	cmp	r1, r5
 8002e84:	d903      	bls.n	8002e8e <_malloc_r+0x22>
 8002e86:	230c      	movs	r3, #12
 8002e88:	6033      	str	r3, [r6, #0]
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e8e:	f000 f857 	bl	8002f40 <__malloc_lock>
 8002e92:	4921      	ldr	r1, [pc, #132]	; (8002f18 <_malloc_r+0xac>)
 8002e94:	680a      	ldr	r2, [r1, #0]
 8002e96:	4614      	mov	r4, r2
 8002e98:	b99c      	cbnz	r4, 8002ec2 <_malloc_r+0x56>
 8002e9a:	4f20      	ldr	r7, [pc, #128]	; (8002f1c <_malloc_r+0xb0>)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	b923      	cbnz	r3, 8002eaa <_malloc_r+0x3e>
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	f000 f83c 	bl	8002f20 <_sbrk_r>
 8002ea8:	6038      	str	r0, [r7, #0]
 8002eaa:	4629      	mov	r1, r5
 8002eac:	4630      	mov	r0, r6
 8002eae:	f000 f837 	bl	8002f20 <_sbrk_r>
 8002eb2:	1c43      	adds	r3, r0, #1
 8002eb4:	d123      	bne.n	8002efe <_malloc_r+0x92>
 8002eb6:	230c      	movs	r3, #12
 8002eb8:	6033      	str	r3, [r6, #0]
 8002eba:	4630      	mov	r0, r6
 8002ebc:	f000 f846 	bl	8002f4c <__malloc_unlock>
 8002ec0:	e7e3      	b.n	8002e8a <_malloc_r+0x1e>
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	1b5b      	subs	r3, r3, r5
 8002ec6:	d417      	bmi.n	8002ef8 <_malloc_r+0x8c>
 8002ec8:	2b0b      	cmp	r3, #11
 8002eca:	d903      	bls.n	8002ed4 <_malloc_r+0x68>
 8002ecc:	6023      	str	r3, [r4, #0]
 8002ece:	441c      	add	r4, r3
 8002ed0:	6025      	str	r5, [r4, #0]
 8002ed2:	e004      	b.n	8002ede <_malloc_r+0x72>
 8002ed4:	6863      	ldr	r3, [r4, #4]
 8002ed6:	42a2      	cmp	r2, r4
 8002ed8:	bf0c      	ite	eq
 8002eda:	600b      	streq	r3, [r1, #0]
 8002edc:	6053      	strne	r3, [r2, #4]
 8002ede:	4630      	mov	r0, r6
 8002ee0:	f000 f834 	bl	8002f4c <__malloc_unlock>
 8002ee4:	f104 000b 	add.w	r0, r4, #11
 8002ee8:	1d23      	adds	r3, r4, #4
 8002eea:	f020 0007 	bic.w	r0, r0, #7
 8002eee:	1ac2      	subs	r2, r0, r3
 8002ef0:	d0cc      	beq.n	8002e8c <_malloc_r+0x20>
 8002ef2:	1a1b      	subs	r3, r3, r0
 8002ef4:	50a3      	str	r3, [r4, r2]
 8002ef6:	e7c9      	b.n	8002e8c <_malloc_r+0x20>
 8002ef8:	4622      	mov	r2, r4
 8002efa:	6864      	ldr	r4, [r4, #4]
 8002efc:	e7cc      	b.n	8002e98 <_malloc_r+0x2c>
 8002efe:	1cc4      	adds	r4, r0, #3
 8002f00:	f024 0403 	bic.w	r4, r4, #3
 8002f04:	42a0      	cmp	r0, r4
 8002f06:	d0e3      	beq.n	8002ed0 <_malloc_r+0x64>
 8002f08:	1a21      	subs	r1, r4, r0
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	f000 f808 	bl	8002f20 <_sbrk_r>
 8002f10:	3001      	adds	r0, #1
 8002f12:	d1dd      	bne.n	8002ed0 <_malloc_r+0x64>
 8002f14:	e7cf      	b.n	8002eb6 <_malloc_r+0x4a>
 8002f16:	bf00      	nop
 8002f18:	20000328 	.word	0x20000328
 8002f1c:	2000032c 	.word	0x2000032c

08002f20 <_sbrk_r>:
 8002f20:	b538      	push	{r3, r4, r5, lr}
 8002f22:	4d06      	ldr	r5, [pc, #24]	; (8002f3c <_sbrk_r+0x1c>)
 8002f24:	2300      	movs	r3, #0
 8002f26:	4604      	mov	r4, r0
 8002f28:	4608      	mov	r0, r1
 8002f2a:	602b      	str	r3, [r5, #0]
 8002f2c:	f7fe f9d6 	bl	80012dc <_sbrk>
 8002f30:	1c43      	adds	r3, r0, #1
 8002f32:	d102      	bne.n	8002f3a <_sbrk_r+0x1a>
 8002f34:	682b      	ldr	r3, [r5, #0]
 8002f36:	b103      	cbz	r3, 8002f3a <_sbrk_r+0x1a>
 8002f38:	6023      	str	r3, [r4, #0]
 8002f3a:	bd38      	pop	{r3, r4, r5, pc}
 8002f3c:	2000034c 	.word	0x2000034c

08002f40 <__malloc_lock>:
 8002f40:	4801      	ldr	r0, [pc, #4]	; (8002f48 <__malloc_lock+0x8>)
 8002f42:	f000 b809 	b.w	8002f58 <__retarget_lock_acquire_recursive>
 8002f46:	bf00      	nop
 8002f48:	20000354 	.word	0x20000354

08002f4c <__malloc_unlock>:
 8002f4c:	4801      	ldr	r0, [pc, #4]	; (8002f54 <__malloc_unlock+0x8>)
 8002f4e:	f000 b804 	b.w	8002f5a <__retarget_lock_release_recursive>
 8002f52:	bf00      	nop
 8002f54:	20000354 	.word	0x20000354

08002f58 <__retarget_lock_acquire_recursive>:
 8002f58:	4770      	bx	lr

08002f5a <__retarget_lock_release_recursive>:
 8002f5a:	4770      	bx	lr

08002f5c <_init>:
 8002f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5e:	bf00      	nop
 8002f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f62:	bc08      	pop	{r3}
 8002f64:	469e      	mov	lr, r3
 8002f66:	4770      	bx	lr

08002f68 <_fini>:
 8002f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6a:	bf00      	nop
 8002f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f6e:	bc08      	pop	{r3}
 8002f70:	469e      	mov	lr, r3
 8002f72:	4770      	bx	lr
