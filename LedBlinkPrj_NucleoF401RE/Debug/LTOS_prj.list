
LTOS_prj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002640  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080027d4  080027d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027fc  080027fc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080027fc  080027fc  000127fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002804  08002804  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002804  08002804  00012804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002808  08002808  00012808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800280c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000068  08002874  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002874  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007342  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001898  00000000  00000000  000273da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  00028c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  00029408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011eeb  00000000  00000000  00029ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006612  00000000  00000000  0003b9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006497d  00000000  00000000  00041fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a693a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002000  00000000  00000000  000a6990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080027bc 	.word	0x080027bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	080027bc 	.word	0x080027bc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	683a      	ldr	r2, [r7, #0]
 80004da:	619a      	str	r2, [r3, #24]
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	041a      	lsls	r2, r3, #16
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	619a      	str	r2, [r3, #24]
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
	...

08000508 <BlinkInit>:
  * @brief  Init Blink Task
  * @param	None
  * @retval None
  */
void BlinkInit(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af02      	add	r7, sp, #8
	blinkFlag = 0;
 800050e:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <BlinkInit+0x3c>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]

	blinkOS = LTOS_oneshotAlloc();
 8000514:	f001 fff8 	bl	8002508 <LTOS_oneshotAlloc>
 8000518:	4603      	mov	r3, r0
 800051a:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <BlinkInit+0x40>)
 800051c:	6013      	str	r3, [r2, #0]
	if(blinkOS) {
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <BlinkInit+0x40>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d00b      	beq.n	800053e <BlinkInit+0x36>
		LTOS_oneshotAttach(blinkOS, (os_callback_t)BlinkTASK, 0, BLINK_OFF_TIME);
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <BlinkInit+0x40>)
 8000528:	6818      	ldr	r0, [r3, #0]
 800052a:	f240 726c 	movw	r2, #1900	; 0x76c
 800052e:	f04f 0300 	mov.w	r3, #0
 8000532:	e9cd 2300 	strd	r2, r3, [sp]
 8000536:	2200      	movs	r2, #0
 8000538:	4904      	ldr	r1, [pc, #16]	; (800054c <BlinkInit+0x44>)
 800053a:	f001 ff99 	bl	8002470 <LTOS_oneshotAttach>
	}
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	200000a4 	.word	0x200000a4
 8000548:	200000a0 	.word	0x200000a0
 800054c:	08000551 	.word	0x08000551

08000550 <BlinkTASK>:
  * @brief  Blink Task
  * @param	argument
  * @retval None
  */
void BlinkTASK(uint32_t arg)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af02      	add	r7, sp, #8
 8000556:	6078      	str	r0, [r7, #4]
	tick_t tout;

	blinkFlag ^= 1;
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <BlinkTASK+0x64>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f083 0301 	eor.w	r3, r3, #1
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <BlinkTASK+0x64>)
 8000564:	701a      	strb	r2, [r3, #0]

	if(blinkFlag) {
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <BlinkTASK+0x64>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d00a      	beq.n	8000584 <BlinkTASK+0x34>
		LL_GPIO_SetOutputPin(BLINK_LED_GPIO_Port, BLINK_LED_Pin);
 800056e:	2120      	movs	r1, #32
 8000570:	4811      	ldr	r0, [pc, #68]	; (80005b8 <BlinkTASK+0x68>)
 8000572:	f7ff ffab 	bl	80004cc <LL_GPIO_SetOutputPin>
		tout = BLINK_ON_TIME;
 8000576:	f04f 0264 	mov.w	r2, #100	; 0x64
 800057a:	f04f 0300 	mov.w	r3, #0
 800057e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000582:	e009      	b.n	8000598 <BlinkTASK+0x48>
	} else {
		LL_GPIO_ResetOutputPin(BLINK_LED_GPIO_Port, BLINK_LED_Pin);
 8000584:	2120      	movs	r1, #32
 8000586:	480c      	ldr	r0, [pc, #48]	; (80005b8 <BlinkTASK+0x68>)
 8000588:	f7ff ffae 	bl	80004e8 <LL_GPIO_ResetOutputPin>
		tout = BLINK_OFF_TIME;
 800058c:	f240 726c 	movw	r2, #1900	; 0x76c
 8000590:	f04f 0300 	mov.w	r3, #0
 8000594:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	LTOS_oneshotAttach(blinkOS, (os_callback_t)BlinkTASK, 0, tout);
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <BlinkTASK+0x6c>)
 800059a:	6818      	ldr	r0, [r3, #0]
 800059c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80005a0:	e9cd 2300 	strd	r2, r3, [sp]
 80005a4:	2200      	movs	r2, #0
 80005a6:	4906      	ldr	r1, [pc, #24]	; (80005c0 <BlinkTASK+0x70>)
 80005a8:	f001 ff62 	bl	8002470 <LTOS_oneshotAttach>
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000a4 	.word	0x200000a4
 80005b8:	40020000 	.word	0x40020000
 80005bc:	200000a0 	.word	0x200000a0
 80005c0:	08000551 	.word	0x08000551

080005c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f003 0307 	and.w	r3, r3, #7
 80005d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <__NVIC_SetPriorityGrouping+0x44>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005f6:	4a04      	ldr	r2, [pc, #16]	; (8000608 <__NVIC_SetPriorityGrouping+0x44>)
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	60d3      	str	r3, [r2, #12]
}
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <__NVIC_GetPriorityGrouping+0x18>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	f003 0307 	and.w	r3, r3, #7
}
 800061a:	4618      	mov	r0, r3
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	db0b      	blt.n	8000652 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	f003 021f 	and.w	r2, r3, #31
 8000640:	4907      	ldr	r1, [pc, #28]	; (8000660 <__NVIC_EnableIRQ+0x38>)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	095b      	lsrs	r3, r3, #5
 8000648:	2001      	movs	r0, #1
 800064a:	fa00 f202 	lsl.w	r2, r0, r2
 800064e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000e100 	.word	0xe000e100

08000664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	db0a      	blt.n	800068e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	b2da      	uxtb	r2, r3
 800067c:	490c      	ldr	r1, [pc, #48]	; (80006b0 <__NVIC_SetPriority+0x4c>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	0112      	lsls	r2, r2, #4
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440b      	add	r3, r1
 8000688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800068c:	e00a      	b.n	80006a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <__NVIC_SetPriority+0x50>)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	f003 030f 	and.w	r3, r3, #15
 800069a:	3b04      	subs	r3, #4
 800069c:	0112      	lsls	r2, r2, #4
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	440b      	add	r3, r1
 80006a2:	761a      	strb	r2, [r3, #24]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000e100 	.word	0xe000e100
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	f1c3 0307 	rsb	r3, r3, #7
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	bf28      	it	cs
 80006d6:	2304      	movcs	r3, #4
 80006d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3304      	adds	r3, #4
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d902      	bls.n	80006e8 <NVIC_EncodePriority+0x30>
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3b03      	subs	r3, #3
 80006e6:	e000      	b.n	80006ea <NVIC_EncodePriority+0x32>
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	f04f 32ff 	mov.w	r2, #4294967295
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	43da      	mvns	r2, r3
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	401a      	ands	r2, r3
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000700:	f04f 31ff 	mov.w	r1, #4294967295
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	43d9      	mvns	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	4313      	orrs	r3, r2
         );
}
 8000712:	4618      	mov	r0, r3
 8000714:	3724      	adds	r7, #36	; 0x24
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <LL_RCC_HSI_Enable+0x1c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <LL_RCC_HSI_Enable+0x1c>)
 800072a:	f043 0301 	orr.w	r3, r3, #1
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <LL_RCC_HSI_IsReady+0x20>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f003 0302 	and.w	r3, r3, #2
 800074c:	2b02      	cmp	r3, #2
 800074e:	bf0c      	ite	eq
 8000750:	2301      	moveq	r3, #1
 8000752:	2300      	movne	r3, #0
 8000754:	b2db      	uxtb	r3, r3
}
 8000756:	4618      	mov	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	40023800 	.word	0x40023800

08000764 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	4904      	ldr	r1, [pc, #16]	; (800078c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800077a:	4313      	orrs	r3, r2
 800077c:	600b      	str	r3, [r1, #0]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <LL_RCC_SetSysClkSource+0x24>)
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f023 0203 	bic.w	r2, r3, #3
 80007a0:	4904      	ldr	r1, [pc, #16]	; (80007b4 <LL_RCC_SetSysClkSource+0x24>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	608b      	str	r3, [r1, #8]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	40023800 	.word	0x40023800

080007b8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <LL_RCC_GetSysClkSource+0x18>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	f003 030c 	and.w	r3, r3, #12
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80007e4:	4904      	ldr	r1, [pc, #16]	; (80007f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	608b      	str	r3, [r1, #8]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	40023800 	.word	0x40023800

080007fc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800080c:	4904      	ldr	r1, [pc, #16]	; (8000820 <LL_RCC_SetAPB1Prescaler+0x24>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4313      	orrs	r3, r2
 8000812:	608b      	str	r3, [r1, #8]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	40023800 	.word	0x40023800

08000824 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <LL_RCC_SetAPB2Prescaler+0x24>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000834:	4904      	ldr	r1, [pc, #16]	; (8000848 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4313      	orrs	r3, r2
 800083a:	608b      	str	r3, [r1, #8]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40023800 	.word	0x40023800

0800084c <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <LL_RCC_SetTIMPrescaler+0x28>)
 8000856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800085a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800085e:	4905      	ldr	r1, [pc, #20]	; (8000874 <LL_RCC_SetTIMPrescaler+0x28>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4313      	orrs	r3, r2
 8000864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	40023800 	.word	0x40023800

08000878 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <LL_RCC_PLL_Enable+0x1c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <LL_RCC_PLL_Enable+0x1c>)
 8000882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <LL_RCC_PLL_IsReady+0x24>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80008a8:	bf0c      	ite	eq
 80008aa:	2301      	moveq	r3, #1
 80008ac:	2300      	movne	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80008d0:	685a      	ldr	r2, [r3, #4]
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80008d4:	4013      	ands	r3, r2
 80008d6:	68f9      	ldr	r1, [r7, #12]
 80008d8:	68ba      	ldr	r2, [r7, #8]
 80008da:	4311      	orrs	r1, r2
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	0192      	lsls	r2, r2, #6
 80008e0:	430a      	orrs	r2, r1
 80008e2:	4908      	ldr	r1, [pc, #32]	; (8000904 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80008e4:	4313      	orrs	r3, r2
 80008e6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80008f0:	4904      	ldr	r1, [pc, #16]	; (8000904 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	40023800 	.word	0x40023800
 8000908:	ffbf8000 	.word	0xffbf8000

0800090c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000918:	4907      	ldr	r1, [pc, #28]	; (8000938 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4313      	orrs	r3, r2
 800091e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4013      	ands	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800092a:	68fb      	ldr	r3, [r7, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	40023800 	.word	0x40023800

0800093c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000948:	4907      	ldr	r1, [pc, #28]	; (8000968 <LL_APB1_GRP1_EnableClock+0x2c>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4313      	orrs	r3, r2
 800094e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4013      	ands	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	40023800 	.word	0x40023800

0800096c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000978:	4907      	ldr	r1, [pc, #28]	; (8000998 <LL_APB2_GRP1_EnableClock+0x2c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4313      	orrs	r3, r2
 800097e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4013      	ands	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	40023800 	.word	0x40023800

0800099c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80009a6:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <LL_SYSCFG_SetEXTISource+0x58>)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	3302      	adds	r3, #2
 80009ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	0c1b      	lsrs	r3, r3, #16
 80009b6:	43db      	mvns	r3, r3
 80009b8:	ea02 0103 	and.w	r1, r2, r3
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	0c1b      	lsrs	r3, r3, #16
 80009c0:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	fa93 f3a3 	rbit	r3, r3
 80009c8:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	fab3 f383 	clz	r3, r3
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	461a      	mov	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	fa03 f202 	lsl.w	r2, r3, r2
 80009da:	4806      	ldr	r0, [pc, #24]	; (80009f4 <LL_SYSCFG_SetEXTISource+0x58>)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	430a      	orrs	r2, r1
 80009e2:	3302      	adds	r3, #2
 80009e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	40013800 	.word	0x40013800

080009f8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <LL_FLASH_SetLatency+0x24>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f023 0207 	bic.w	r2, r3, #7
 8000a08:	4904      	ldr	r1, [pc, #16]	; (8000a1c <LL_FLASH_SetLatency+0x24>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	600b      	str	r3, [r1, #0]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	40023c00 	.word	0x40023c00

08000a20 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <LL_FLASH_GetLatency+0x18>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0307 	and.w	r3, r3, #7
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023c00 	.word	0x40023c00

08000a3c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000a4c:	4904      	ldr	r1, [pc, #16]	; (8000a60 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	600b      	str	r3, [r1, #0]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	40007000 	.word	0x40007000

08000a64 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f043 0201 	orr.w	r2, r3, #1
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	601a      	str	r2, [r3, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d01c      	beq.n	8000aee <LL_TIM_OC_DisableFast+0x4a>
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	d017      	beq.n	8000aea <LL_TIM_OC_DisableFast+0x46>
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	2b10      	cmp	r3, #16
 8000abe:	d012      	beq.n	8000ae6 <LL_TIM_OC_DisableFast+0x42>
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	2b40      	cmp	r3, #64	; 0x40
 8000ac4:	d00d      	beq.n	8000ae2 <LL_TIM_OC_DisableFast+0x3e>
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000acc:	d007      	beq.n	8000ade <LL_TIM_OC_DisableFast+0x3a>
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ad4:	d101      	bne.n	8000ada <LL_TIM_OC_DisableFast+0x36>
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	e00a      	b.n	8000af0 <LL_TIM_OC_DisableFast+0x4c>
 8000ada:	2306      	movs	r3, #6
 8000adc:	e008      	b.n	8000af0 <LL_TIM_OC_DisableFast+0x4c>
 8000ade:	2304      	movs	r3, #4
 8000ae0:	e006      	b.n	8000af0 <LL_TIM_OC_DisableFast+0x4c>
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	e004      	b.n	8000af0 <LL_TIM_OC_DisableFast+0x4c>
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	e002      	b.n	8000af0 <LL_TIM_OC_DisableFast+0x4c>
 8000aea:	2301      	movs	r3, #1
 8000aec:	e000      	b.n	8000af0 <LL_TIM_OC_DisableFast+0x4c>
 8000aee:	2300      	movs	r3, #0
 8000af0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3318      	adds	r3, #24
 8000af6:	4619      	mov	r1, r3
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <LL_TIM_OC_DisableFast+0x84>)
 8000afc:	5cd3      	ldrb	r3, [r2, r3]
 8000afe:	440b      	add	r3, r1
 8000b00:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	4908      	ldr	r1, [pc, #32]	; (8000b2c <LL_TIM_OC_DisableFast+0x88>)
 8000b0a:	5ccb      	ldrb	r3, [r1, r3]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	2304      	movs	r3, #4
 8000b10:	408b      	lsls	r3, r1
 8000b12:	43db      	mvns	r3, r3
 8000b14:	401a      	ands	r2, r3
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	601a      	str	r2, [r3, #0]

}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	080027d4 	.word	0x080027d4
 8000b2c:	080027dc 	.word	0x080027dc

08000b30 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	f043 0201 	orr.w	r2, r3, #1
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	60da      	str	r2, [r3, #12]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	60da      	str	r2, [r3, #12]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	615a      	str	r2, [r3, #20]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <LL_GPIO_SetPinMode>:
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa93 f3a3 	rbit	r3, r3
 8000bb6:	613b      	str	r3, [r7, #16]
  return result;
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	fab3 f383 	clz	r3, r3
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	401a      	ands	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	fa93 f3a3 	rbit	r3, r3
 8000bd6:	61bb      	str	r3, [r7, #24]
  return result;
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	fab3 f383 	clz	r3, r3
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	431a      	orrs	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	601a      	str	r2, [r3, #0]
}
 8000bee:	bf00      	nop
 8000bf0:	3724      	adds	r7, #36	; 0x24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <LL_GPIO_SetPinPull>:
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b089      	sub	sp, #36	; 0x24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	fa93 f3a3 	rbit	r3, r3
 8000c14:	613b      	str	r3, [r7, #16]
  return result;
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	fab3 f383 	clz	r3, r3
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	2103      	movs	r1, #3
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43db      	mvns	r3, r3
 8000c28:	401a      	ands	r2, r3
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	fa93 f3a3 	rbit	r3, r3
 8000c34:	61bb      	str	r3, [r7, #24]
  return result;
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	fab3 f383 	clz	r3, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	431a      	orrs	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	60da      	str	r2, [r3, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3724      	adds	r7, #36	; 0x24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <LL_GPIO_ResetOutputPin>:
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	041a      	lsls	r2, r3, #16
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	619a      	str	r2, [r3, #24]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000c7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c7e:	f7ff fe75 	bl	800096c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000c82:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000c86:	f7ff fe59 	bl	800093c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c8a:	2007      	movs	r0, #7
 8000c8c:	f7ff fc9a 	bl	80005c4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c90:	f000 f80c 	bl	8000cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c94:	f000 f8fe 	bl	8000e94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c98:	f000 f8ac 	bl	8000df4 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8000c9c:	f000 f850 	bl	8000d40 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  BlinkInit();
 8000ca0:	f7ff fc32 	bl	8000508 <BlinkInit>
  LTOS_run();
 8000ca4:	f001 fb6e 	bl	8002384 <LTOS_run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <main+0x32>
	...

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	f7ff fea1 	bl	80009f8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000cb6:	bf00      	nop
 8000cb8:	f7ff feb2 	bl	8000a20 <LL_FLASH_GetLatency>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d1fa      	bne.n	8000cb8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000cc2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000cc6:	f7ff feb9 	bl	8000a3c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000cca:	2010      	movs	r0, #16
 8000ccc:	f7ff fd4a 	bl	8000764 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000cd0:	f7ff fd26 	bl	8000720 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000cd4:	bf00      	nop
 8000cd6:	f7ff fd33 	bl	8000740 <LL_RCC_HSI_IsReady>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d1fa      	bne.n	8000cd6 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8000ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce4:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000ce8:	2110      	movs	r1, #16
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff fde8 	bl	80008c0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000cf0:	f7ff fdc2 	bl	8000878 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000cf4:	bf00      	nop
 8000cf6:	f7ff fdcf 	bl	8000898 <LL_RCC_PLL_IsReady>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d1fa      	bne.n	8000cf6 <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff fd67 	bl	80007d4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000d06:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d0a:	f7ff fd77 	bl	80007fc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff fd88 	bl	8000824 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000d14:	2002      	movs	r0, #2
 8000d16:	f7ff fd3b 	bl	8000790 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000d1a:	bf00      	nop
 8000d1c:	f7ff fd4c 	bl	80007b8 <LL_RCC_GetSysClkSource>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b08      	cmp	r3, #8
 8000d24:	d1fa      	bne.n	8000d1c <SystemClock_Config+0x70>
  {

  }
  LL_Init1msTick(84000000);
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <SystemClock_Config+0x90>)
 8000d28:	f001 faaa 	bl	8002280 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 8000d2c:	4803      	ldr	r0, [pc, #12]	; (8000d3c <SystemClock_Config+0x90>)
 8000d2e:	f001 fab5 	bl	800229c <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff fd8a 	bl	800084c <LL_RCC_SetTIMPrescaler>
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	0501bd00 	.word	0x0501bd00

08000d40 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08e      	sub	sp, #56	; 0x38
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2220      	movs	r2, #32
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 fc5d 	bl	800261c <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM11);
 8000d62:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d66:	f7ff fe01 	bl	800096c <LL_APB2_GRP1_EnableClock>

  /* TIM11 interrupt Init */
  NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d6a:	f7ff fc4f 	bl	800060c <__NVIC_GetPriorityGrouping>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fc9f 	bl	80006b8 <NVIC_EncodePriority>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	201a      	movs	r0, #26
 8000d80:	f7ff fc70 	bl	8000664 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000d84:	201a      	movs	r0, #26
 8000d86:	f7ff fc4f 	bl	8000628 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8000d8a:	2353      	movs	r3, #83	; 0x53
 8000d8c:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 999;
 8000d92:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM11, &TIM_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	4813      	ldr	r0, [pc, #76]	; (8000df0 <MX_TIM11_Init+0xb0>)
 8000da4:	f000 fddc 	bl	8001960 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM11);
 8000da8:	4811      	ldr	r0, [pc, #68]	; (8000df0 <MX_TIM11_Init+0xb0>)
 8000daa:	f7ff fe6b 	bl	8000a84 <LL_TIM_EnableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM11, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <MX_TIM11_Init+0xb0>)
 8000dca:	f000 fe43 	bl	8001a54 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM11, LL_TIM_CHANNEL_CH1);
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4807      	ldr	r0, [pc, #28]	; (8000df0 <MX_TIM11_Init+0xb0>)
 8000dd2:	f7ff fe67 	bl	8000aa4 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM11_Init 2 */
  LL_TIM_EnableARRPreload(TIM11);
 8000dd6:	4806      	ldr	r0, [pc, #24]	; (8000df0 <MX_TIM11_Init+0xb0>)
 8000dd8:	f7ff fe54 	bl	8000a84 <LL_TIM_EnableARRPreload>
  LL_TIM_EnableCounter(TIM11);
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_TIM11_Init+0xb0>)
 8000dde:	f7ff fe41 	bl	8000a64 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM11);
 8000de2:	4803      	ldr	r0, [pc, #12]	; (8000df0 <MX_TIM11_Init+0xb0>)
 8000de4:	f7ff fea4 	bl	8000b30 <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM11_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	3738      	adds	r7, #56	; 0x38
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40014800 	.word	0x40014800

08000df4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08e      	sub	sp, #56	; 0x38
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
 8000e1c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000e1e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e22:	f7ff fd8b 	bl	800093c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f7ff fd70 	bl	800090c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e2c:	230c      	movs	r3, #12
 8000e2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e30:	2302      	movs	r3, #2
 8000e32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000e40:	2307      	movs	r3, #7
 8000e42:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	4619      	mov	r1, r3
 8000e48:	4810      	ldr	r0, [pc, #64]	; (8000e8c <MX_USART2_UART_Init+0x98>)
 8000e4a:	f000 fb69 	bl	8001520 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000e4e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e52:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000e60:	230c      	movs	r3, #12
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4807      	ldr	r0, [pc, #28]	; (8000e90 <MX_USART2_UART_Init+0x9c>)
 8000e74:	f001 f986 	bl	8002184 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_USART2_UART_Init+0x9c>)
 8000e7a:	f7ff fe79 	bl	8000b70 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000e7e:	4804      	ldr	r0, [pc, #16]	; (8000e90 <MX_USART2_UART_Init+0x9c>)
 8000e80:	f7ff fe66 	bl	8000b50 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	3738      	adds	r7, #56	; 0x38
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40004400 	.word	0x40004400

08000e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]
 8000eb2:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000eb4:	2004      	movs	r0, #4
 8000eb6:	f7ff fd29 	bl	800090c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000eba:	2080      	movs	r0, #128	; 0x80
 8000ebc:	f7ff fd26 	bl	800090c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff fd23 	bl	800090c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f7ff fd20 	bl	800090c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(BLINK_LED_GPIO_Port, BLINK_LED_Pin);
 8000ecc:	2120      	movs	r1, #32
 8000ece:	481a      	ldr	r0, [pc, #104]	; (8000f38 <MX_GPIO_Init+0xa4>)
 8000ed0:	f7ff fec2 	bl	8000c58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000ed4:	4919      	ldr	r1, [pc, #100]	; (8000f3c <MX_GPIO_Init+0xa8>)
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f7ff fd60 	bl	800099c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee0:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000eea:	2302      	movs	r3, #2
 8000eec:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000eee:	f107 0318 	add.w	r3, r7, #24
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f98e 	bl	8001214 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000efe:	4810      	ldr	r0, [pc, #64]	; (8000f40 <MX_GPIO_Init+0xac>)
 8000f00:	f7ff fe7b 	bl	8000bfa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <MX_GPIO_Init+0xac>)
 8000f0c:	f7ff fe46 	bl	8000b9c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = BLINK_LED_Pin;
 8000f10:	2320      	movs	r3, #32
 8000f12:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f14:	2301      	movs	r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BLINK_LED_GPIO_Port, &GPIO_InitStruct);
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <MX_GPIO_Init+0xa4>)
 8000f2a:	f000 faf9 	bl	8001520 <LL_GPIO_Init>

}
 8000f2e:	bf00      	nop
 8000f30:	3720      	adds	r7, #32
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	00f00003 	.word	0x00f00003
 8000f40:	40020800 	.word	0x40020800

08000f44 <LL_TIM_ClearFlag_UPDATE>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f06f 0201 	mvn.w	r2, #1
 8000f52:	611a      	str	r2, [r3, #16]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d101      	bne.n	8000f78 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <NMI_Handler+0x4>

08000f8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <HardFault_Handler+0x4>

08000f92 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <MemManage_Handler+0x4>

08000f98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <BusFault_Handler+0x4>

08000f9e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <UsageFault_Handler+0x4>

08000fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM11)) {
 8000fe0:	4806      	ldr	r0, [pc, #24]	; (8000ffc <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8000fe2:	f7ff ffbd 	bl	8000f60 <LL_TIM_IsActiveFlag_UPDATE>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d004      	beq.n	8000ff6 <TIM1_TRG_COM_TIM11_IRQHandler+0x1a>
		LL_TIM_ClearFlag_UPDATE(TIM11);
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8000fee:	f7ff ffa9 	bl	8000f44 <LL_TIM_ClearFlag_UPDATE>
		LTOS_tickIncrease();
 8000ff2:	f001 fac7 	bl	8002584 <LTOS_tickIncrease>
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40014800 	.word	0x40014800

08001000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001008:	4a14      	ldr	r2, [pc, #80]	; (800105c <_sbrk+0x5c>)
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <_sbrk+0x60>)
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <_sbrk+0x64>)
 800101e:	4a12      	ldr	r2, [pc, #72]	; (8001068 <_sbrk+0x68>)
 8001020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	429a      	cmp	r2, r3
 800102e:	d207      	bcs.n	8001040 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001030:	f001 faba 	bl	80025a8 <__errno>
 8001034:	4603      	mov	r3, r0
 8001036:	220c      	movs	r2, #12
 8001038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	e009      	b.n	8001054 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <_sbrk+0x64>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <_sbrk+0x64>)
 8001050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20018000 	.word	0x20018000
 8001060:	00000400 	.word	0x00000400
 8001064:	20000084 	.word	0x20000084
 8001068:	200000b8 	.word	0x200000b8

0800106c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <SystemInit+0x20>)
 8001072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <SystemInit+0x20>)
 8001078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800107c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001096:	490e      	ldr	r1, [pc, #56]	; (80010d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001098:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010ac:	4c0b      	ldr	r4, [pc, #44]	; (80010dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ba:	f7ff ffd7 	bl	800106c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010be:	f001 fa79 	bl	80025b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c2:	f7ff fdd8 	bl	8000c76 <main>
  bx  lr    
 80010c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010d4:	0800280c 	.word	0x0800280c
  ldr r2, =_sbss
 80010d8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010dc:	200000b8 	.word	0x200000b8

080010e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC_IRQHandler>
	...

080010e4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <LL_EXTI_EnableIT_0_31+0x20>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <LL_EXTI_EnableIT_0_31+0x20>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	600b      	str	r3, [r1, #0]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40013c00 	.word	0x40013c00

08001108 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <LL_EXTI_DisableIT_0_31+0x24>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	43db      	mvns	r3, r3
 8001118:	4904      	ldr	r1, [pc, #16]	; (800112c <LL_EXTI_DisableIT_0_31+0x24>)
 800111a:	4013      	ands	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40013c00 	.word	0x40013c00

08001130 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <LL_EXTI_EnableEvent_0_31+0x20>)
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	4904      	ldr	r1, [pc, #16]	; (8001150 <LL_EXTI_EnableEvent_0_31+0x20>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4313      	orrs	r3, r2
 8001142:	604b      	str	r3, [r1, #4]

}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	40013c00 	.word	0x40013c00

08001154 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <LL_EXTI_DisableEvent_0_31+0x24>)
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	43db      	mvns	r3, r3
 8001164:	4904      	ldr	r1, [pc, #16]	; (8001178 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001166:	4013      	ands	r3, r2
 8001168:	604b      	str	r3, [r1, #4]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40013c00 	.word	0x40013c00

0800117c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	4904      	ldr	r1, [pc, #16]	; (800119c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4313      	orrs	r3, r2
 800118e:	608b      	str	r3, [r1, #8]

}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	40013c00 	.word	0x40013c00

080011a0 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	4904      	ldr	r1, [pc, #16]	; (80011c4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80011b2:	4013      	ands	r3, r2
 80011b4:	608b      	str	r3, [r1, #8]

}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40013c00 	.word	0x40013c00

080011c8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	4904      	ldr	r1, [pc, #16]	; (80011e8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4313      	orrs	r3, r2
 80011da:	60cb      	str	r3, [r1, #12]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40013c00 	.word	0x40013c00

080011ec <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	4904      	ldr	r1, [pc, #16]	; (8001210 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80011fe:	4013      	ands	r3, r2
 8001200:	60cb      	str	r3, [r1, #12]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40013c00 	.word	0x40013c00

08001214 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	791b      	ldrb	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d065      	beq.n	80012f4 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d06c      	beq.n	800130a <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	795b      	ldrb	r3, [r3, #5]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d01c      	beq.n	8001272 <LL_EXTI_Init+0x5e>
 8001238:	2b02      	cmp	r3, #2
 800123a:	dc25      	bgt.n	8001288 <LL_EXTI_Init+0x74>
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <LL_EXTI_Init+0x32>
 8001240:	2b01      	cmp	r3, #1
 8001242:	d00b      	beq.n	800125c <LL_EXTI_Init+0x48>
 8001244:	e020      	b.n	8001288 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff82 	bl	8001154 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff45 	bl	80010e4 <LL_EXTI_EnableIT_0_31>
          break;
 800125a:	e018      	b.n	800128e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff51 	bl	8001108 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff60 	bl	8001130 <LL_EXTI_EnableEvent_0_31>
          break;
 8001270:	e00d      	b.n	800128e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff34 	bl	80010e4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff55 	bl	8001130 <LL_EXTI_EnableEvent_0_31>
          break;
 8001286:	e002      	b.n	800128e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
          break;
 800128c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	799b      	ldrb	r3, [r3, #6]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d039      	beq.n	800130a <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	799b      	ldrb	r3, [r3, #6]
 800129a:	2b03      	cmp	r3, #3
 800129c:	d01c      	beq.n	80012d8 <LL_EXTI_Init+0xc4>
 800129e:	2b03      	cmp	r3, #3
 80012a0:	dc25      	bgt.n	80012ee <LL_EXTI_Init+0xda>
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d002      	beq.n	80012ac <LL_EXTI_Init+0x98>
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d00b      	beq.n	80012c2 <LL_EXTI_Init+0xae>
 80012aa:	e020      	b.n	80012ee <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff9b 	bl	80011ec <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff5e 	bl	800117c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80012c0:	e024      	b.n	800130c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff6a 	bl	80011a0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff79 	bl	80011c8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80012d6:	e019      	b.n	800130c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff4d 	bl	800117c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff6e 	bl	80011c8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80012ec:	e00e      	b.n	800130c <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
            break;
 80012f2:	e00b      	b.n	800130c <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff05 	bl	8001108 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff26 	bl	8001154 <LL_EXTI_DisableEvent_0_31>
 8001308:	e000      	b.n	800130c <LL_EXTI_Init+0xf8>
      }
 800130a:	bf00      	nop
  }
  return status;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <LL_GPIO_SetPinMode>:
{
 8001316:	b480      	push	{r7}
 8001318:	b089      	sub	sp, #36	; 0x24
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	fa93 f3a3 	rbit	r3, r3
 8001330:	613b      	str	r3, [r7, #16]
  return result;
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	fab3 f383 	clz	r3, r3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2103      	movs	r1, #3
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	401a      	ands	r2, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa93 f3a3 	rbit	r3, r3
 8001350:	61bb      	str	r3, [r7, #24]
  return result;
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	fab3 f383 	clz	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	431a      	orrs	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	3724      	adds	r7, #36	; 0x24
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_GPIO_SetPinOutputType>:
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	43db      	mvns	r3, r3
 8001388:	401a      	ands	r2, r3
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	fb01 f303 	mul.w	r3, r1, r3
 8001392:	431a      	orrs	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	605a      	str	r2, [r3, #4]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_GPIO_SetPinSpeed>:
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa93 f3a3 	rbit	r3, r3
 80013be:	613b      	str	r3, [r7, #16]
  return result;
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	fab3 f383 	clz	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2103      	movs	r1, #3
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	401a      	ands	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	fa93 f3a3 	rbit	r3, r3
 80013de:	61bb      	str	r3, [r7, #24]
  return result;
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	fab3 f383 	clz	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	431a      	orrs	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	609a      	str	r2, [r3, #8]
}
 80013f6:	bf00      	nop
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <LL_GPIO_SetPinPull>:
{
 8001402:	b480      	push	{r7}
 8001404:	b089      	sub	sp, #36	; 0x24
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	fa93 f3a3 	rbit	r3, r3
 800141c:	613b      	str	r3, [r7, #16]
  return result;
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	fab3 f383 	clz	r3, r3
 8001424:	b2db      	uxtb	r3, r3
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2103      	movs	r1, #3
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	401a      	ands	r2, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	61bb      	str	r3, [r7, #24]
  return result;
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	fab3 f383 	clz	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	431a      	orrs	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	60da      	str	r2, [r3, #12]
}
 8001454:	bf00      	nop
 8001456:	3724      	adds	r7, #36	; 0x24
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_GPIO_SetAFPin_0_7>:
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6a1a      	ldr	r2, [r3, #32]
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa93 f3a3 	rbit	r3, r3
 800147a:	613b      	str	r3, [r7, #16]
  return result;
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	fab3 f383 	clz	r3, r3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	210f      	movs	r1, #15
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	401a      	ands	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	61bb      	str	r3, [r7, #24]
  return result;
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	431a      	orrs	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	621a      	str	r2, [r3, #32]
}
 80014b2:	bf00      	nop
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_GPIO_SetAFPin_8_15>:
{
 80014be:	b480      	push	{r7}
 80014c0:	b089      	sub	sp, #36	; 0x24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa93 f3a3 	rbit	r3, r3
 80014da:	613b      	str	r3, [r7, #16]
  return result;
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	210f      	movs	r1, #15
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	401a      	ands	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	0a1b      	lsrs	r3, r3, #8
 80014f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa93 f3a3 	rbit	r3, r3
 80014fc:	61bb      	str	r3, [r7, #24]
  return result;
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	fab3 f383 	clz	r3, r3
 8001504:	b2db      	uxtb	r3, r3
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	431a      	orrs	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001514:	bf00      	nop
 8001516:	3724      	adds	r7, #36	; 0x24
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	613b      	str	r3, [r7, #16]
  return result;
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	fab3 f383 	clz	r3, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800154a:	e050      	b.n	80015ee <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2101      	movs	r1, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d042      	beq.n	80015e8 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d003      	beq.n	8001572 <LL_GPIO_Init+0x52>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d10d      	bne.n	800158e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	461a      	mov	r2, r3
 8001578:	69b9      	ldr	r1, [r7, #24]
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ff12 	bl	80013a4 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	461a      	mov	r2, r3
 8001586:	69b9      	ldr	r1, [r7, #24]
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff fef3 	bl	8001374 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	461a      	mov	r2, r3
 8001594:	69b9      	ldr	r1, [r7, #24]
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ff33 	bl	8001402 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d11a      	bne.n	80015da <LL_GPIO_Init+0xba>
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	fa93 f3a3 	rbit	r3, r3
 80015ae:	60bb      	str	r3, [r7, #8]
  return result;
 80015b0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80015b2:	fab3 f383 	clz	r3, r3
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b07      	cmp	r3, #7
 80015ba:	d807      	bhi.n	80015cc <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	461a      	mov	r2, r3
 80015c2:	69b9      	ldr	r1, [r7, #24]
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff4b 	bl	8001460 <LL_GPIO_SetAFPin_0_7>
 80015ca:	e006      	b.n	80015da <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	461a      	mov	r2, r3
 80015d2:	69b9      	ldr	r1, [r7, #24]
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff72 	bl	80014be <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	461a      	mov	r2, r3
 80015e0:	69b9      	ldr	r1, [r7, #24]
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fe97 	bl	8001316 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	3301      	adds	r3, #1
 80015ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1a7      	bne.n	800154c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <LL_RCC_GetSysClkSource>:
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <LL_RCC_GetSysClkSource+0x18>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 030c 	and.w	r3, r3, #12
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <LL_RCC_GetAHBPrescaler>:
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <LL_RCC_GetAHBPrescaler+0x18>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <LL_RCC_GetAPB1Prescaler>:
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800

0800165c <LL_RCC_GetAPB2Prescaler>:
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800

08001678 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <LL_RCC_PLL_GetMainSource+0x18>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800

08001694 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <LL_RCC_PLL_GetN+0x18>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	099b      	lsrs	r3, r3, #6
 800169e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40023800 	.word	0x40023800

080016b0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <LL_RCC_PLL_GetP+0x18>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800

080016cc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <LL_RCC_PLL_GetDivider+0x18>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800

080016e8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80016f0:	f000 f820 	bl	8001734 <RCC_GetSystemClockFreq>
 80016f4:	4602      	mov	r2, r0
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f840 	bl	8001784 <RCC_GetHCLKClockFreq>
 8001704:	4602      	mov	r2, r0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f84e 	bl	80017b0 <RCC_GetPCLK1ClockFreq>
 8001714:	4602      	mov	r2, r0
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f85a 	bl	80017d8 <RCC_GetPCLK2ClockFreq>
 8001724:	4602      	mov	r2, r0
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60da      	str	r2, [r3, #12]
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800173e:	f7ff ff63 	bl	8001608 <LL_RCC_GetSysClkSource>
 8001742:	4603      	mov	r3, r0
 8001744:	2b08      	cmp	r3, #8
 8001746:	d00c      	beq.n	8001762 <RCC_GetSystemClockFreq+0x2e>
 8001748:	2b08      	cmp	r3, #8
 800174a:	d80f      	bhi.n	800176c <RCC_GetSystemClockFreq+0x38>
 800174c:	2b00      	cmp	r3, #0
 800174e:	d002      	beq.n	8001756 <RCC_GetSystemClockFreq+0x22>
 8001750:	2b04      	cmp	r3, #4
 8001752:	d003      	beq.n	800175c <RCC_GetSystemClockFreq+0x28>
 8001754:	e00a      	b.n	800176c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <RCC_GetSystemClockFreq+0x48>)
 8001758:	607b      	str	r3, [r7, #4]
      break;
 800175a:	e00a      	b.n	8001772 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <RCC_GetSystemClockFreq+0x4c>)
 800175e:	607b      	str	r3, [r7, #4]
      break;
 8001760:	e007      	b.n	8001772 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001762:	2008      	movs	r0, #8
 8001764:	f000 f84c 	bl	8001800 <RCC_PLL_GetFreqDomain_SYS>
 8001768:	6078      	str	r0, [r7, #4]
      break;
 800176a:	e002      	b.n	8001772 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <RCC_GetSystemClockFreq+0x48>)
 800176e:	607b      	str	r3, [r7, #4]
      break;
 8001770:	bf00      	nop
  }

  return frequency;
 8001772:	687b      	ldr	r3, [r7, #4]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	00f42400 	.word	0x00f42400
 8001780:	007a1200 	.word	0x007a1200

08001784 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800178c:	f7ff ff4a 	bl	8001624 <LL_RCC_GetAHBPrescaler>
 8001790:	4603      	mov	r3, r0
 8001792:	091b      	lsrs	r3, r3, #4
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <RCC_GetHCLKClockFreq+0x28>)
 800179a:	5cd3      	ldrb	r3, [r2, r3]
 800179c:	461a      	mov	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	40d3      	lsrs	r3, r2
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	080027e4 	.word	0x080027e4

080017b0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80017b8:	f7ff ff42 	bl	8001640 <LL_RCC_GetAPB1Prescaler>
 80017bc:	4603      	mov	r3, r0
 80017be:	0a9b      	lsrs	r3, r3, #10
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <RCC_GetPCLK1ClockFreq+0x24>)
 80017c2:	5cd3      	ldrb	r3, [r2, r3]
 80017c4:	461a      	mov	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	40d3      	lsrs	r3, r2
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	080027f4 	.word	0x080027f4

080017d8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80017e0:	f7ff ff3c 	bl	800165c <LL_RCC_GetAPB2Prescaler>
 80017e4:	4603      	mov	r3, r0
 80017e6:	0b5b      	lsrs	r3, r3, #13
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <RCC_GetPCLK2ClockFreq+0x24>)
 80017ea:	5cd3      	ldrb	r3, [r2, r3]
 80017ec:	461a      	mov	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	40d3      	lsrs	r3, r2
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	080027f4 	.word	0x080027f4

08001800 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001814:	f7ff ff30 	bl	8001678 <LL_RCC_PLL_GetMainSource>
 8001818:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001826:	d003      	beq.n	8001830 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001828:	e005      	b.n	8001836 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800182c:	617b      	str	r3, [r7, #20]
      break;
 800182e:	e005      	b.n	800183c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001832:	617b      	str	r3, [r7, #20]
      break;
 8001834:	e002      	b.n	800183c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001838:	617b      	str	r3, [r7, #20]
      break;
 800183a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b08      	cmp	r3, #8
 8001840:	d113      	bne.n	800186a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001842:	f7ff ff43 	bl	80016cc <LL_RCC_PLL_GetDivider>
 8001846:	4602      	mov	r2, r0
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fbb3 f4f2 	udiv	r4, r3, r2
 800184e:	f7ff ff21 	bl	8001694 <LL_RCC_PLL_GetN>
 8001852:	4603      	mov	r3, r0
 8001854:	fb03 f404 	mul.w	r4, r3, r4
 8001858:	f7ff ff2a 	bl	80016b0 <LL_RCC_PLL_GetP>
 800185c:	4603      	mov	r3, r0
 800185e:	0c1b      	lsrs	r3, r3, #16
 8001860:	3301      	adds	r3, #1
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fbb4 f3f3 	udiv	r3, r4, r3
 8001868:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800186a:	693b      	ldr	r3, [r7, #16]
}
 800186c:	4618      	mov	r0, r3
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd90      	pop	{r4, r7, pc}
 8001874:	00f42400 	.word	0x00f42400
 8001878:	007a1200 	.word	0x007a1200

0800187c <LL_TIM_SetPrescaler>:
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_TIM_SetAutoReload>:
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_TIM_SetRepetitionCounter>:
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_TIM_OC_SetCompareCH1>:
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_TIM_OC_SetCompareCH2>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_TIM_OC_SetCompareCH3>:
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_TIM_OC_SetCompareCH4>:
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f043 0201 	orr.w	r2, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	615a      	str	r2, [r3, #20]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a31      	ldr	r2, [pc, #196]	; (8001a38 <LL_TIM_Init+0xd8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00f      	beq.n	8001998 <LL_TIM_Init+0x38>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800197e:	d00b      	beq.n	8001998 <LL_TIM_Init+0x38>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a2e      	ldr	r2, [pc, #184]	; (8001a3c <LL_TIM_Init+0xdc>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d007      	beq.n	8001998 <LL_TIM_Init+0x38>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a2d      	ldr	r2, [pc, #180]	; (8001a40 <LL_TIM_Init+0xe0>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d003      	beq.n	8001998 <LL_TIM_Init+0x38>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a2c      	ldr	r2, [pc, #176]	; (8001a44 <LL_TIM_Init+0xe4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d106      	bne.n	80019a6 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a23      	ldr	r2, [pc, #140]	; (8001a38 <LL_TIM_Init+0xd8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d01b      	beq.n	80019e6 <LL_TIM_Init+0x86>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b4:	d017      	beq.n	80019e6 <LL_TIM_Init+0x86>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a20      	ldr	r2, [pc, #128]	; (8001a3c <LL_TIM_Init+0xdc>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d013      	beq.n	80019e6 <LL_TIM_Init+0x86>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a1f      	ldr	r2, [pc, #124]	; (8001a40 <LL_TIM_Init+0xe0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00f      	beq.n	80019e6 <LL_TIM_Init+0x86>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a1e      	ldr	r2, [pc, #120]	; (8001a44 <LL_TIM_Init+0xe4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00b      	beq.n	80019e6 <LL_TIM_Init+0x86>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <LL_TIM_Init+0xe8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d007      	beq.n	80019e6 <LL_TIM_Init+0x86>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <LL_TIM_Init+0xec>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d003      	beq.n	80019e6 <LL_TIM_Init+0x86>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <LL_TIM_Init+0xf0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d106      	bne.n	80019f4 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	4619      	mov	r1, r3
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff49 	bl	8001898 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff35 	bl	800187c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <LL_TIM_Init+0xd8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d105      	bne.n	8001a26 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff47 	bl	80018b4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ff8a 	bl	8001940 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	40000400 	.word	0x40000400
 8001a40:	40000800 	.word	0x40000800
 8001a44:	40000c00 	.word	0x40000c00
 8001a48:	40014000 	.word	0x40014000
 8001a4c:	40014400 	.word	0x40014400
 8001a50:	40014800 	.word	0x40014800

08001a54 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a6a:	d027      	beq.n	8001abc <LL_TIM_OC_Init+0x68>
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a72:	d82a      	bhi.n	8001aca <LL_TIM_OC_Init+0x76>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a7a:	d018      	beq.n	8001aae <LL_TIM_OC_Init+0x5a>
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a82:	d822      	bhi.n	8001aca <LL_TIM_OC_Init+0x76>
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d003      	beq.n	8001a92 <LL_TIM_OC_Init+0x3e>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b10      	cmp	r3, #16
 8001a8e:	d007      	beq.n	8001aa0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001a90:	e01b      	b.n	8001aca <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 f81f 	bl	8001ad8 <OC1Config>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8001a9e:	e015      	b.n	8001acc <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 f87e 	bl	8001ba4 <OC2Config>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8001aac:	e00e      	b.n	8001acc <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 f8e1 	bl	8001c78 <OC3Config>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8001aba:	e007      	b.n	8001acc <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f944 	bl	8001d4c <OC4Config>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8001ac8:	e000      	b.n	8001acc <LL_TIM_OC_Init+0x78>
      break;
 8001aca:	bf00      	nop
  }

  return result;
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	f023 0201 	bic.w	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f023 0303 	bic.w	r3, r3, #3
 8001b06:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f023 0202 	bic.w	r2, r3, #2
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f023 0201 	bic.w	r2, r3, #1
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a1a      	ldr	r2, [pc, #104]	; (8001ba0 <OC1Config+0xc8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d11e      	bne.n	8001b78 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f023 0208 	bic.w	r2, r3, #8
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4313      	orrs	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f023 0204 	bic.w	r2, r3, #4
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4313      	orrs	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fea0 	bl	80018d0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40010000 	.word	0x40010000

08001ba4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	f023 0210 	bic.w	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	4313      	orrs	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f023 0220 	bic.w	r2, r3, #32
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f023 0210 	bic.w	r2, r3, #16
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	4313      	orrs	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <OC2Config+0xd0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d11f      	bne.n	8001c4c <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	019b      	lsls	r3, r3, #6
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	019b      	lsls	r3, r3, #6
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fe44 	bl	80018ec <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40010000 	.word	0x40010000

08001c78 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f023 0303 	bic.w	r3, r3, #3
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <OC3Config+0xd0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d11f      	bne.n	8001d1e <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	029b      	lsls	r3, r3, #10
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	029b      	lsls	r3, r3, #10
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	015b      	lsls	r3, r3, #5
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fde9 	bl	8001908 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40010000 	.word	0x40010000

08001d4c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	031b      	lsls	r3, r3, #12
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	031b      	lsls	r3, r3, #12
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a0f      	ldr	r2, [pc, #60]	; (8001dec <OC4Config+0xa0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d107      	bne.n	8001dc4 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	019b      	lsls	r3, r3, #6
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fda4 	bl	8001924 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40010000 	.word	0x40010000

08001df0 <LL_USART_IsEnabled>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e04:	bf0c      	ite	eq
 8001e06:	2301      	moveq	r3, #1
 8001e08:	2300      	movne	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_USART_SetStopBitsLength>:
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	611a      	str	r2, [r3, #16]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_USART_SetHWFlowCtrl>:
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	615a      	str	r2, [r3, #20]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_USART_SetBaudRate>:
{
 8001e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e68:	b09f      	sub	sp, #124	; 0x7c
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6778      	str	r0, [r7, #116]	; 0x74
 8001e6e:	6739      	str	r1, [r7, #112]	; 0x70
 8001e70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001e72:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e7a:	f040 80bc 	bne.w	8001ff6 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001e7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e80:	461c      	mov	r4, r3
 8001e82:	f04f 0500 	mov.w	r5, #0
 8001e86:	4622      	mov	r2, r4
 8001e88:	462b      	mov	r3, r5
 8001e8a:	eb12 0a02 	adds.w	sl, r2, r2
 8001e8e:	eb43 0b03 	adc.w	fp, r3, r3
 8001e92:	4652      	mov	r2, sl
 8001e94:	465b      	mov	r3, fp
 8001e96:	1912      	adds	r2, r2, r4
 8001e98:	eb45 0303 	adc.w	r3, r5, r3
 8001e9c:	f04f 0000 	mov.w	r0, #0
 8001ea0:	f04f 0100 	mov.w	r1, #0
 8001ea4:	00d9      	lsls	r1, r3, #3
 8001ea6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001eaa:	00d0      	lsls	r0, r2, #3
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	1911      	adds	r1, r2, r4
 8001eb2:	6639      	str	r1, [r7, #96]	; 0x60
 8001eb4:	416b      	adcs	r3, r5
 8001eb6:	667b      	str	r3, [r7, #100]	; 0x64
 8001eb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	1891      	adds	r1, r2, r2
 8001ec2:	6339      	str	r1, [r7, #48]	; 0x30
 8001ec4:	415b      	adcs	r3, r3
 8001ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ec8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ecc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ed0:	f7fe f980 	bl	80001d4 <__aeabi_uldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4ba9      	ldr	r3, [pc, #676]	; (8002180 <LL_USART_SetBaudRate+0x31c>)
 8001eda:	fba3 2302 	umull	r2, r3, r3, r2
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	b29e      	uxth	r6, r3
 8001ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ee8:	461c      	mov	r4, r3
 8001eea:	f04f 0500 	mov.w	r5, #0
 8001eee:	4622      	mov	r2, r4
 8001ef0:	462b      	mov	r3, r5
 8001ef2:	1891      	adds	r1, r2, r2
 8001ef4:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ef6:	415b      	adcs	r3, r3
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001efa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001efe:	1912      	adds	r2, r2, r4
 8001f00:	eb45 0303 	adc.w	r3, r5, r3
 8001f04:	f04f 0000 	mov.w	r0, #0
 8001f08:	f04f 0100 	mov.w	r1, #0
 8001f0c:	00d9      	lsls	r1, r3, #3
 8001f0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f12:	00d0      	lsls	r0, r2, #3
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	1911      	adds	r1, r2, r4
 8001f1a:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f1c:	416b      	adcs	r3, r5
 8001f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f22:	461a      	mov	r2, r3
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	1891      	adds	r1, r2, r2
 8001f2a:	6239      	str	r1, [r7, #32]
 8001f2c:	415b      	adcs	r3, r3
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f34:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001f38:	f7fe f94c 	bl	80001d4 <__aeabi_uldivmod>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4b8f      	ldr	r3, [pc, #572]	; (8002180 <LL_USART_SetBaudRate+0x31c>)
 8001f42:	fba3 1302 	umull	r1, r3, r3, r2
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	2164      	movs	r1, #100	; 0x64
 8001f4a:	fb01 f303 	mul.w	r3, r1, r3
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	3332      	adds	r3, #50	; 0x32
 8001f54:	4a8a      	ldr	r2, [pc, #552]	; (8002180 <LL_USART_SetBaudRate+0x31c>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	4433      	add	r3, r6
 8001f6a:	b29e      	uxth	r6, r3
 8001f6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f04f 0100 	mov.w	r1, #0
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	1894      	adds	r4, r2, r2
 8001f7a:	61bc      	str	r4, [r7, #24]
 8001f7c:	415b      	adcs	r3, r3
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f84:	1812      	adds	r2, r2, r0
 8001f86:	eb41 0303 	adc.w	r3, r1, r3
 8001f8a:	f04f 0400 	mov.w	r4, #0
 8001f8e:	f04f 0500 	mov.w	r5, #0
 8001f92:	00dd      	lsls	r5, r3, #3
 8001f94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f98:	00d4      	lsls	r4, r2, #3
 8001f9a:	4622      	mov	r2, r4
 8001f9c:	462b      	mov	r3, r5
 8001f9e:	1814      	adds	r4, r2, r0
 8001fa0:	653c      	str	r4, [r7, #80]	; 0x50
 8001fa2:	414b      	adcs	r3, r1
 8001fa4:	657b      	str	r3, [r7, #84]	; 0x54
 8001fa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fa8:	461a      	mov	r2, r3
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	1891      	adds	r1, r2, r2
 8001fb0:	6139      	str	r1, [r7, #16]
 8001fb2:	415b      	adcs	r3, r3
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001fbe:	f7fe f909 	bl	80001d4 <__aeabi_uldivmod>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4b6e      	ldr	r3, [pc, #440]	; (8002180 <LL_USART_SetBaudRate+0x31c>)
 8001fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	2164      	movs	r1, #100	; 0x64
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	3332      	adds	r3, #50	; 0x32
 8001fda:	4a69      	ldr	r2, [pc, #420]	; (8002180 <LL_USART_SetBaudRate+0x31c>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4433      	add	r3, r6
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ff2:	609a      	str	r2, [r3, #8]
}
 8001ff4:	e0be      	b.n	8002174 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ff8:	461c      	mov	r4, r3
 8001ffa:	f04f 0500 	mov.w	r5, #0
 8001ffe:	4622      	mov	r2, r4
 8002000:	462b      	mov	r3, r5
 8002002:	eb12 0802 	adds.w	r8, r2, r2
 8002006:	eb43 0903 	adc.w	r9, r3, r3
 800200a:	4642      	mov	r2, r8
 800200c:	464b      	mov	r3, r9
 800200e:	1912      	adds	r2, r2, r4
 8002010:	eb45 0303 	adc.w	r3, r5, r3
 8002014:	f04f 0000 	mov.w	r0, #0
 8002018:	f04f 0100 	mov.w	r1, #0
 800201c:	00d9      	lsls	r1, r3, #3
 800201e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002022:	00d0      	lsls	r0, r2, #3
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	1911      	adds	r1, r2, r4
 800202a:	64b9      	str	r1, [r7, #72]	; 0x48
 800202c:	416b      	adcs	r3, r5
 800202e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002030:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002032:	4618      	mov	r0, r3
 8002034:	f04f 0100 	mov.w	r1, #0
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	008b      	lsls	r3, r1, #2
 8002042:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002046:	0082      	lsls	r2, r0, #2
 8002048:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800204c:	f7fe f8c2 	bl	80001d4 <__aeabi_uldivmod>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4b4a      	ldr	r3, [pc, #296]	; (8002180 <LL_USART_SetBaudRate+0x31c>)
 8002056:	fba3 2302 	umull	r2, r3, r3, r2
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	b29b      	uxth	r3, r3
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	b29e      	uxth	r6, r3
 8002062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002064:	4618      	mov	r0, r3
 8002066:	f04f 0100 	mov.w	r1, #0
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	1894      	adds	r4, r2, r2
 8002070:	60bc      	str	r4, [r7, #8]
 8002072:	415b      	adcs	r3, r3
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800207a:	1812      	adds	r2, r2, r0
 800207c:	eb41 0303 	adc.w	r3, r1, r3
 8002080:	f04f 0400 	mov.w	r4, #0
 8002084:	f04f 0500 	mov.w	r5, #0
 8002088:	00dd      	lsls	r5, r3, #3
 800208a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800208e:	00d4      	lsls	r4, r2, #3
 8002090:	4622      	mov	r2, r4
 8002092:	462b      	mov	r3, r5
 8002094:	1814      	adds	r4, r2, r0
 8002096:	643c      	str	r4, [r7, #64]	; 0x40
 8002098:	414b      	adcs	r3, r1
 800209a:	647b      	str	r3, [r7, #68]	; 0x44
 800209c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800209e:	4618      	mov	r0, r3
 80020a0:	f04f 0100 	mov.w	r1, #0
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	008b      	lsls	r3, r1, #2
 80020ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80020b2:	0082      	lsls	r2, r0, #2
 80020b4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80020b8:	f7fe f88c 	bl	80001d4 <__aeabi_uldivmod>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <LL_USART_SetBaudRate+0x31c>)
 80020c2:	fba3 1302 	umull	r1, r3, r3, r2
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2164      	movs	r1, #100	; 0x64
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	3332      	adds	r3, #50	; 0x32
 80020d4:	4a2a      	ldr	r2, [pc, #168]	; (8002180 <LL_USART_SetBaudRate+0x31c>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	b29b      	uxth	r3, r3
 80020de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	4433      	add	r3, r6
 80020e6:	b29e      	uxth	r6, r3
 80020e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ea:	4618      	mov	r0, r3
 80020ec:	f04f 0100 	mov.w	r1, #0
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	1894      	adds	r4, r2, r2
 80020f6:	603c      	str	r4, [r7, #0]
 80020f8:	415b      	adcs	r3, r3
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002100:	1812      	adds	r2, r2, r0
 8002102:	eb41 0303 	adc.w	r3, r1, r3
 8002106:	f04f 0400 	mov.w	r4, #0
 800210a:	f04f 0500 	mov.w	r5, #0
 800210e:	00dd      	lsls	r5, r3, #3
 8002110:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002114:	00d4      	lsls	r4, r2, #3
 8002116:	4622      	mov	r2, r4
 8002118:	462b      	mov	r3, r5
 800211a:	1814      	adds	r4, r2, r0
 800211c:	63bc      	str	r4, [r7, #56]	; 0x38
 800211e:	414b      	adcs	r3, r1
 8002120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002124:	4618      	mov	r0, r3
 8002126:	f04f 0100 	mov.w	r1, #0
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	008b      	lsls	r3, r1, #2
 8002134:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002138:	0082      	lsls	r2, r0, #2
 800213a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800213e:	f7fe f849 	bl	80001d4 <__aeabi_uldivmod>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <LL_USART_SetBaudRate+0x31c>)
 8002148:	fba3 1302 	umull	r1, r3, r3, r2
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	2164      	movs	r1, #100	; 0x64
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	3332      	adds	r3, #50	; 0x32
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <LL_USART_SetBaudRate+0x31c>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	b29b      	uxth	r3, r3
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	b29b      	uxth	r3, r3
 800216a:	4433      	add	r3, r6
 800216c:	b29b      	uxth	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002172:	609a      	str	r2, [r3, #8]
}
 8002174:	bf00      	nop
 8002176:	377c      	adds	r7, #124	; 0x7c
 8002178:	46bd      	mov	sp, r7
 800217a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800217e:	bf00      	nop
 8002180:	51eb851f 	.word	0x51eb851f

08002184 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff fe2a 	bl	8001df0 <LL_USART_IsEnabled>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d149      	bne.n	8002236 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80021aa:	f023 030c 	bic.w	r3, r3, #12
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	6851      	ldr	r1, [r2, #4]
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	68d2      	ldr	r2, [r2, #12]
 80021b6:	4311      	orrs	r1, r2
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	6912      	ldr	r2, [r2, #16]
 80021bc:	4311      	orrs	r1, r2
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	6992      	ldr	r2, [r2, #24]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	4619      	mov	r1, r3
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff fe21 	bl	8001e18 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	4619      	mov	r1, r3
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fe2e 	bl	8001e3e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80021e2:	f107 0308 	add.w	r3, r7, #8
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fa7e 	bl	80016e8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a14      	ldr	r2, [pc, #80]	; (8002240 <LL_USART_Init+0xbc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d102      	bne.n	80021fa <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	e00c      	b.n	8002214 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a11      	ldr	r2, [pc, #68]	; (8002244 <LL_USART_Init+0xc0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d102      	bne.n	8002208 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	e005      	b.n	8002214 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0f      	ldr	r2, [pc, #60]	; (8002248 <LL_USART_Init+0xc4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d101      	bne.n	8002214 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00d      	beq.n	8002236 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8002222:	2300      	movs	r3, #0
 8002224:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69b9      	ldr	r1, [r7, #24]
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff fe17 	bl	8001e64 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002236:	7ffb      	ldrb	r3, [r7, #31]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40011000 	.word	0x40011000
 8002244:	40004400 	.word	0x40004400
 8002248:	40011400 	.word	0x40011400

0800224c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	fbb2 f3f3 	udiv	r3, r2, r3
 800225e:	4a07      	ldr	r2, [pc, #28]	; (800227c <LL_InitTick+0x30>)
 8002260:	3b01      	subs	r3, #1
 8002262:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <LL_InitTick+0x30>)
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226a:	4b04      	ldr	r3, [pc, #16]	; (800227c <LL_InitTick+0x30>)
 800226c:	2205      	movs	r2, #5
 800226e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000e010 	.word	0xe000e010

08002280 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002288:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffdd 	bl	800224c <LL_InitTick>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80022a4:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <LL_SetSystemCoreClock+0x1c>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6013      	str	r3, [r2, #0]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000000 	.word	0x20000000

080022bc <oneshotInit>:
  * @brief  Init Oneshot module
  * @param	None
  * @retval None
  */
void oneshotInit(oneshot_t *os)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
    oneshot_t *osp = NULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]

#ifdef LTOS_MAGIC
    os->magic = LTOS_MAGIC;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a17      	ldr	r2, [pc, #92]	; (8002328 <oneshotInit+0x6c>)
 80022cc:	601a      	str	r2, [r3, #0]
#endif
	os->callback = NULL;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	621a      	str	r2, [r3, #32]
	os->arg = 0;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	619a      	str	r2, [r3, #24]
	os->isEnabled = false;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
	os->isOverflowed = false;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	775a      	strb	r2, [r3, #29]
	os->nosp = NULL;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	625a      	str	r2, [r3, #36]	; 0x24
    
    if(os != fosp) {                // if this onceall is not first oneshot..
 80022ec:	4b0f      	ldr	r3, [pc, #60]	; (800232c <oneshotInit+0x70>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d00e      	beq.n	8002314 <oneshotInit+0x58>
    	osp = fosp;
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <oneshotInit+0x70>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]
		while(1) {
            if(osp->nosp !=  NULL) {
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <oneshotInit+0x50>
                osp = osp->nosp;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	60fb      	str	r3, [r7, #12]
            if(osp->nosp !=  NULL) {
 800230a:	e7f7      	b.n	80022fc <oneshotInit+0x40>
            } else {
				break;
 800230c:	bf00      	nop
			}
        }
        osp->nosp = os;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	625a      	str	r2, [r3, #36]	; 0x24
    }
    
    os->nosp = NULL;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	4c564e54 	.word	0x4c564e54
 800232c:	20000088 	.word	0x20000088

08002330 <oneshotFree>:
  * @brief  Free Oneshot
  * @param	os : oneshot pointer will be free
  * @retval None
  */
void oneshotFree(oneshot_t *os)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
    oneshot_t   *osp = NULL;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]

	osp = fosp;
 800233c:	4b10      	ldr	r3, [pc, #64]	; (8002380 <oneshotFree+0x50>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
    if(osp == os) {
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	429a      	cmp	r2, r3
 8002348:	d104      	bne.n	8002354 <oneshotFree+0x24>
        fosp = os->nosp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <oneshotFree+0x50>)
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e00d      	b.n	8002370 <oneshotFree+0x40>
    } else {
        while(1) {						// link current os's next os pointer to previous os's next pointer
            if(osp->nosp == os) {
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	429a      	cmp	r2, r3
 800235c:	d104      	bne.n	8002368 <oneshotFree+0x38>
                osp->nosp = os->nosp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
                break;
 8002366:	e003      	b.n	8002370 <oneshotFree+0x40>
            } else {
            	osp = osp->nosp;		// skip to next os
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	60fb      	str	r3, [r7, #12]
            if(osp->nosp == os) {
 800236e:	e7f1      	b.n	8002354 <oneshotFree+0x24>
            }
        }
    }
    free(os);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f94b 	bl	800260c <free>
}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000088 	.word	0x20000088

08002384 <LTOS_run>:
  * @param	None
  * @retval result:
  * 		1- LTOS_ERR_MAGIC_CRASH
  */
ltosError_t LTOS_run(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
    oneshot_t *os = NULL,
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
    		  *nos= NULL;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]

	tick_t tickNow = 0x00;
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	e9c7 2300 	strd	r2, r3, [r7]

	ltosError_t err = LTOS_ERR_NONE;
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]

	os = fosp;
 80023a2:	4b30      	ldr	r3, [pc, #192]	; (8002464 <LTOS_run+0xe0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	617b      	str	r3, [r7, #20]

	while(err == LTOS_ERR_NONE) {
 80023a8:	e054      	b.n	8002454 <LTOS_run+0xd0>
#ifdef LTOS_MAGIC
        if(os->magic != LTOS_MAGIC) {
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a2e      	ldr	r2, [pc, #184]	; (8002468 <LTOS_run+0xe4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d001      	beq.n	80023b8 <LTOS_run+0x34>
            err = LTOS_ERR_MAGIC_CRASH;  // there is memory crash, stop execution..
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
        }
#endif
		tickNow = LTOS_getTick();
 80023b8:	f000 f8c6 	bl	8002548 <LTOS_getTick>
 80023bc:	e9c7 0100 	strd	r0, r1, [r7]
		if(!os->isEnabled) {
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	7f1b      	ldrb	r3, [r3, #28]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d119      	bne.n	80023fc <LTOS_run+0x78>
			// Find next oneshot
            if(os->nosp == NULL) {
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d103      	bne.n	80023d8 <LTOS_run+0x54>
            	nos = fosp;
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <LTOS_run+0xe0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	e002      	b.n	80023de <LTOS_run+0x5a>
            } else {
        		nos = os->nosp;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	613b      	str	r3, [r7, #16]
            }
            // Garbage collection
#ifdef LTOS_GARBAGE_COLL_TOUT
        	if(os->killTm >= tickNow) {
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80023e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023e8:	4299      	cmp	r1, r3
 80023ea:	bf08      	it	eq
 80023ec:	4290      	cmpeq	r0, r2
 80023ee:	d302      	bcc.n	80023f6 <LTOS_run+0x72>
        		oneshotFree(os);
 80023f0:	6978      	ldr	r0, [r7, #20]
 80023f2:	f7ff ff9d 	bl	8002330 <oneshotFree>
        	}
#endif
        	// Jump to next oneshot
        	os = nos;
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	617b      	str	r3, [r7, #20]
			continue;
 80023fa:	e02b      	b.n	8002454 <LTOS_run+0xd0>
		}
		// Execute callback if its time elapsed
		if(tickNow >= os->endTick) {
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002402:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002406:	4299      	cmp	r1, r3
 8002408:	bf08      	it	eq
 800240a:	4290      	cmpeq	r0, r2
 800240c:	d30b      	bcc.n	8002426 <LTOS_run+0xa2>
			os->isOverflowed= true;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2201      	movs	r2, #1
 8002412:	775a      	strb	r2, [r3, #29]
			os->isEnabled 	= false;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2200      	movs	r2, #0
 8002418:	771a      	strb	r2, [r3, #28]
            os->callback(os->arg);
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	6992      	ldr	r2, [r2, #24]
 8002422:	4610      	mov	r0, r2
 8002424:	4798      	blx	r3
		}
		// Find next oneshot
        if(os->nosp !=  NULL) 	{ os = os->nosp; }
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <LTOS_run+0xb2>
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	e002      	b.n	800243c <LTOS_run+0xb8>
        else 					{ os = fosp;     }
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <LTOS_run+0xe0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	617b      	str	r3, [r7, #20]
        // Free oneshot if requested by user
        if(dosp) {
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <LTOS_run+0xe8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <LTOS_run+0xd0>
        	oneshotFree(dosp);
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <LTOS_run+0xe8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff71 	bl	8002330 <oneshotFree>
        	dosp = NULL;
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <LTOS_run+0xe8>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
	while(err == LTOS_ERR_NONE) {
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0a7      	beq.n	80023aa <LTOS_run+0x26>
        }
	}
    
    return err;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20000088 	.word	0x20000088
 8002468:	4c564e54 	.word	0x4c564e54
 800246c:	2000008c 	.word	0x2000008c

08002470 <LTOS_oneshotAttach>:
  * 		0- LTOS_ERR_NONE
  * 		1- LTOS_ERR_MAGIC_CRASH
  * 		2- LTOS_ERR_INVALID_PTR
  */
ltosError_t LTOS_oneshotAttach(oneshot_t *os, os_callback_t fp, uint32_t arg, tick_t tout)
{
 8002470:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
	tick_t time_now = 0x00;
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if((os == NULL) || (fp == NULL)) {
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <LTOS_oneshotAttach+0x26>
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <LTOS_oneshotAttach+0x2a>
		return LTOS_ERR_INVALID_PTR;
 8002496:	2302      	movs	r3, #2
 8002498:	e02d      	b.n	80024f6 <LTOS_oneshotAttach+0x86>
	}
#ifdef LTOS_MAGIC
    if(os->magic != LTOS_MAGIC) {
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a18      	ldr	r2, [pc, #96]	; (8002500 <LTOS_oneshotAttach+0x90>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d001      	beq.n	80024a8 <LTOS_oneshotAttach+0x38>
        return LTOS_ERR_MAGIC_CRASH;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e026      	b.n	80024f6 <LTOS_oneshotAttach+0x86>
    }
#endif

    time_now 		= LTOS_getTick();
 80024a8:	f000 f84e 	bl	8002548 <LTOS_getTick>
 80024ac:	e9c7 0104 	strd	r0, r1, [r7, #16]
	os->endTick 	= time_now + tout;
 80024b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024b8:	eb10 0802 	adds.w	r8, r0, r2
 80024bc:	eb41 0903 	adc.w	r9, r1, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	e9c3 8902 	strd	r8, r9, [r3, #8]
#ifdef LTOS_GARBAGE_COLL_TOUT
	os->killTm		= time_now + LTOS_GARBAGE_COLL_TOUT;
 80024c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024ca:	480e      	ldr	r0, [pc, #56]	; (8002504 <LTOS_oneshotAttach+0x94>)
 80024cc:	f04f 0100 	mov.w	r1, #0
 80024d0:	1814      	adds	r4, r2, r0
 80024d2:	eb43 0501 	adc.w	r5, r3, r1
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	e9c3 4504 	strd	r4, r5, [r3, #16]
#endif
	os->callback 	= fp;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	621a      	str	r2, [r3, #32]
	os->arg 		= arg;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	619a      	str	r2, [r3, #24]
	os->isEnabled 	= true;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2201      	movs	r2, #1
 80024ec:	771a      	strb	r2, [r3, #28]
   	os->isOverflowed= false;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	775a      	strb	r2, [r3, #29]

	return LTOS_ERR_NONE;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002500:	4c564e54 	.word	0x4c564e54
 8002504:	0036ee80 	.word	0x0036ee80

08002508 <LTOS_oneshotAlloc>:
  * @brief  Allocate new Oneshot
  * @param	None
  * @retval Oneshot pointer if allocated else NULL
  */
oneshot_t *LTOS_oneshotAlloc(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
    oneshot_t *os = NULL;
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]

    os = malloc(sizeof(oneshot_t));
 8002512:	2028      	movs	r0, #40	; 0x28
 8002514:	f000 f872 	bl	80025fc <malloc>
 8002518:	4603      	mov	r3, r0
 800251a:	607b      	str	r3, [r7, #4]
    if(!os) {                               // no free space on heap for oneshot allocation!
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <LTOS_oneshotAlloc+0x1e>
        return NULL;
 8002522:	2300      	movs	r3, #0
 8002524:	e00a      	b.n	800253c <LTOS_oneshotAlloc+0x34>
    }

    if( fosp == NULL ) {                    // if this oneshot is first oneshot, save this address..
 8002526:	4b07      	ldr	r3, [pc, #28]	; (8002544 <LTOS_oneshotAlloc+0x3c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <LTOS_oneshotAlloc+0x2c>
        fosp = os;
 800252e:	4a05      	ldr	r2, [pc, #20]	; (8002544 <LTOS_oneshotAlloc+0x3c>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6013      	str	r3, [r2, #0]
    }
    oneshotInit(os);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff fec1 	bl	80022bc <oneshotInit>

    return os;
 800253a:	687b      	ldr	r3, [r7, #4]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000088 	.word	0x20000088

08002548 <LTOS_getTick>:
  * @brief  Get tick count
  * @param	None
  * @retval None
  */
tick_t LTOS_getTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
	tick_t preTick;

	while(preTick != tick) {
 800254e:	e004      	b.n	800255a <LTOS_getTick+0x12>
		preTick = tick;
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <LTOS_getTick+0x38>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	e9c7 2300 	strd	r2, r3, [r7]
	while(preTick != tick) {
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <LTOS_getTick+0x38>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002564:	4299      	cmp	r1, r3
 8002566:	bf08      	it	eq
 8002568:	4290      	cmpeq	r0, r2
 800256a:	d1f1      	bne.n	8002550 <LTOS_getTick+0x8>
	}

	return preTick;
 800256c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000090 	.word	0x20000090

08002584 <LTOS_tickIncrease>:
  * @brief  Increase tick count
  * @param	None
  * @retval None
  */
void LTOS_tickIncrease(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
	tick++;
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <LTOS_tickIncrease+0x20>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	1c50      	adds	r0, r2, #1
 8002590:	f143 0100 	adc.w	r1, r3, #0
 8002594:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <LTOS_tickIncrease+0x20>)
 8002596:	e9c3 0100 	strd	r0, r1, [r3]
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	20000090 	.word	0x20000090

080025a8 <__errno>:
 80025a8:	4b01      	ldr	r3, [pc, #4]	; (80025b0 <__errno+0x8>)
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000004 	.word	0x20000004

080025b4 <__libc_init_array>:
 80025b4:	b570      	push	{r4, r5, r6, lr}
 80025b6:	4d0d      	ldr	r5, [pc, #52]	; (80025ec <__libc_init_array+0x38>)
 80025b8:	4c0d      	ldr	r4, [pc, #52]	; (80025f0 <__libc_init_array+0x3c>)
 80025ba:	1b64      	subs	r4, r4, r5
 80025bc:	10a4      	asrs	r4, r4, #2
 80025be:	2600      	movs	r6, #0
 80025c0:	42a6      	cmp	r6, r4
 80025c2:	d109      	bne.n	80025d8 <__libc_init_array+0x24>
 80025c4:	4d0b      	ldr	r5, [pc, #44]	; (80025f4 <__libc_init_array+0x40>)
 80025c6:	4c0c      	ldr	r4, [pc, #48]	; (80025f8 <__libc_init_array+0x44>)
 80025c8:	f000 f8f8 	bl	80027bc <_init>
 80025cc:	1b64      	subs	r4, r4, r5
 80025ce:	10a4      	asrs	r4, r4, #2
 80025d0:	2600      	movs	r6, #0
 80025d2:	42a6      	cmp	r6, r4
 80025d4:	d105      	bne.n	80025e2 <__libc_init_array+0x2e>
 80025d6:	bd70      	pop	{r4, r5, r6, pc}
 80025d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025dc:	4798      	blx	r3
 80025de:	3601      	adds	r6, #1
 80025e0:	e7ee      	b.n	80025c0 <__libc_init_array+0xc>
 80025e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025e6:	4798      	blx	r3
 80025e8:	3601      	adds	r6, #1
 80025ea:	e7f2      	b.n	80025d2 <__libc_init_array+0x1e>
 80025ec:	08002804 	.word	0x08002804
 80025f0:	08002804 	.word	0x08002804
 80025f4:	08002804 	.word	0x08002804
 80025f8:	08002808 	.word	0x08002808

080025fc <malloc>:
 80025fc:	4b02      	ldr	r3, [pc, #8]	; (8002608 <malloc+0xc>)
 80025fe:	4601      	mov	r1, r0
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	f000 b863 	b.w	80026cc <_malloc_r>
 8002606:	bf00      	nop
 8002608:	20000004 	.word	0x20000004

0800260c <free>:
 800260c:	4b02      	ldr	r3, [pc, #8]	; (8002618 <free+0xc>)
 800260e:	4601      	mov	r1, r0
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	f000 b80b 	b.w	800262c <_free_r>
 8002616:	bf00      	nop
 8002618:	20000004 	.word	0x20000004

0800261c <memset>:
 800261c:	4402      	add	r2, r0
 800261e:	4603      	mov	r3, r0
 8002620:	4293      	cmp	r3, r2
 8002622:	d100      	bne.n	8002626 <memset+0xa>
 8002624:	4770      	bx	lr
 8002626:	f803 1b01 	strb.w	r1, [r3], #1
 800262a:	e7f9      	b.n	8002620 <memset+0x4>

0800262c <_free_r>:
 800262c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800262e:	2900      	cmp	r1, #0
 8002630:	d048      	beq.n	80026c4 <_free_r+0x98>
 8002632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002636:	9001      	str	r0, [sp, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	f1a1 0404 	sub.w	r4, r1, #4
 800263e:	bfb8      	it	lt
 8002640:	18e4      	addlt	r4, r4, r3
 8002642:	f000 f8ad 	bl	80027a0 <__malloc_lock>
 8002646:	4a20      	ldr	r2, [pc, #128]	; (80026c8 <_free_r+0x9c>)
 8002648:	9801      	ldr	r0, [sp, #4]
 800264a:	6813      	ldr	r3, [r2, #0]
 800264c:	4615      	mov	r5, r2
 800264e:	b933      	cbnz	r3, 800265e <_free_r+0x32>
 8002650:	6063      	str	r3, [r4, #4]
 8002652:	6014      	str	r4, [r2, #0]
 8002654:	b003      	add	sp, #12
 8002656:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800265a:	f000 b8a7 	b.w	80027ac <__malloc_unlock>
 800265e:	42a3      	cmp	r3, r4
 8002660:	d90b      	bls.n	800267a <_free_r+0x4e>
 8002662:	6821      	ldr	r1, [r4, #0]
 8002664:	1862      	adds	r2, r4, r1
 8002666:	4293      	cmp	r3, r2
 8002668:	bf04      	itt	eq
 800266a:	681a      	ldreq	r2, [r3, #0]
 800266c:	685b      	ldreq	r3, [r3, #4]
 800266e:	6063      	str	r3, [r4, #4]
 8002670:	bf04      	itt	eq
 8002672:	1852      	addeq	r2, r2, r1
 8002674:	6022      	streq	r2, [r4, #0]
 8002676:	602c      	str	r4, [r5, #0]
 8002678:	e7ec      	b.n	8002654 <_free_r+0x28>
 800267a:	461a      	mov	r2, r3
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	b10b      	cbz	r3, 8002684 <_free_r+0x58>
 8002680:	42a3      	cmp	r3, r4
 8002682:	d9fa      	bls.n	800267a <_free_r+0x4e>
 8002684:	6811      	ldr	r1, [r2, #0]
 8002686:	1855      	adds	r5, r2, r1
 8002688:	42a5      	cmp	r5, r4
 800268a:	d10b      	bne.n	80026a4 <_free_r+0x78>
 800268c:	6824      	ldr	r4, [r4, #0]
 800268e:	4421      	add	r1, r4
 8002690:	1854      	adds	r4, r2, r1
 8002692:	42a3      	cmp	r3, r4
 8002694:	6011      	str	r1, [r2, #0]
 8002696:	d1dd      	bne.n	8002654 <_free_r+0x28>
 8002698:	681c      	ldr	r4, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	6053      	str	r3, [r2, #4]
 800269e:	4421      	add	r1, r4
 80026a0:	6011      	str	r1, [r2, #0]
 80026a2:	e7d7      	b.n	8002654 <_free_r+0x28>
 80026a4:	d902      	bls.n	80026ac <_free_r+0x80>
 80026a6:	230c      	movs	r3, #12
 80026a8:	6003      	str	r3, [r0, #0]
 80026aa:	e7d3      	b.n	8002654 <_free_r+0x28>
 80026ac:	6825      	ldr	r5, [r4, #0]
 80026ae:	1961      	adds	r1, r4, r5
 80026b0:	428b      	cmp	r3, r1
 80026b2:	bf04      	itt	eq
 80026b4:	6819      	ldreq	r1, [r3, #0]
 80026b6:	685b      	ldreq	r3, [r3, #4]
 80026b8:	6063      	str	r3, [r4, #4]
 80026ba:	bf04      	itt	eq
 80026bc:	1949      	addeq	r1, r1, r5
 80026be:	6021      	streq	r1, [r4, #0]
 80026c0:	6054      	str	r4, [r2, #4]
 80026c2:	e7c7      	b.n	8002654 <_free_r+0x28>
 80026c4:	b003      	add	sp, #12
 80026c6:	bd30      	pop	{r4, r5, pc}
 80026c8:	20000098 	.word	0x20000098

080026cc <_malloc_r>:
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ce:	1ccd      	adds	r5, r1, #3
 80026d0:	f025 0503 	bic.w	r5, r5, #3
 80026d4:	3508      	adds	r5, #8
 80026d6:	2d0c      	cmp	r5, #12
 80026d8:	bf38      	it	cc
 80026da:	250c      	movcc	r5, #12
 80026dc:	2d00      	cmp	r5, #0
 80026de:	4606      	mov	r6, r0
 80026e0:	db01      	blt.n	80026e6 <_malloc_r+0x1a>
 80026e2:	42a9      	cmp	r1, r5
 80026e4:	d903      	bls.n	80026ee <_malloc_r+0x22>
 80026e6:	230c      	movs	r3, #12
 80026e8:	6033      	str	r3, [r6, #0]
 80026ea:	2000      	movs	r0, #0
 80026ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026ee:	f000 f857 	bl	80027a0 <__malloc_lock>
 80026f2:	4921      	ldr	r1, [pc, #132]	; (8002778 <_malloc_r+0xac>)
 80026f4:	680a      	ldr	r2, [r1, #0]
 80026f6:	4614      	mov	r4, r2
 80026f8:	b99c      	cbnz	r4, 8002722 <_malloc_r+0x56>
 80026fa:	4f20      	ldr	r7, [pc, #128]	; (800277c <_malloc_r+0xb0>)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	b923      	cbnz	r3, 800270a <_malloc_r+0x3e>
 8002700:	4621      	mov	r1, r4
 8002702:	4630      	mov	r0, r6
 8002704:	f000 f83c 	bl	8002780 <_sbrk_r>
 8002708:	6038      	str	r0, [r7, #0]
 800270a:	4629      	mov	r1, r5
 800270c:	4630      	mov	r0, r6
 800270e:	f000 f837 	bl	8002780 <_sbrk_r>
 8002712:	1c43      	adds	r3, r0, #1
 8002714:	d123      	bne.n	800275e <_malloc_r+0x92>
 8002716:	230c      	movs	r3, #12
 8002718:	6033      	str	r3, [r6, #0]
 800271a:	4630      	mov	r0, r6
 800271c:	f000 f846 	bl	80027ac <__malloc_unlock>
 8002720:	e7e3      	b.n	80026ea <_malloc_r+0x1e>
 8002722:	6823      	ldr	r3, [r4, #0]
 8002724:	1b5b      	subs	r3, r3, r5
 8002726:	d417      	bmi.n	8002758 <_malloc_r+0x8c>
 8002728:	2b0b      	cmp	r3, #11
 800272a:	d903      	bls.n	8002734 <_malloc_r+0x68>
 800272c:	6023      	str	r3, [r4, #0]
 800272e:	441c      	add	r4, r3
 8002730:	6025      	str	r5, [r4, #0]
 8002732:	e004      	b.n	800273e <_malloc_r+0x72>
 8002734:	6863      	ldr	r3, [r4, #4]
 8002736:	42a2      	cmp	r2, r4
 8002738:	bf0c      	ite	eq
 800273a:	600b      	streq	r3, [r1, #0]
 800273c:	6053      	strne	r3, [r2, #4]
 800273e:	4630      	mov	r0, r6
 8002740:	f000 f834 	bl	80027ac <__malloc_unlock>
 8002744:	f104 000b 	add.w	r0, r4, #11
 8002748:	1d23      	adds	r3, r4, #4
 800274a:	f020 0007 	bic.w	r0, r0, #7
 800274e:	1ac2      	subs	r2, r0, r3
 8002750:	d0cc      	beq.n	80026ec <_malloc_r+0x20>
 8002752:	1a1b      	subs	r3, r3, r0
 8002754:	50a3      	str	r3, [r4, r2]
 8002756:	e7c9      	b.n	80026ec <_malloc_r+0x20>
 8002758:	4622      	mov	r2, r4
 800275a:	6864      	ldr	r4, [r4, #4]
 800275c:	e7cc      	b.n	80026f8 <_malloc_r+0x2c>
 800275e:	1cc4      	adds	r4, r0, #3
 8002760:	f024 0403 	bic.w	r4, r4, #3
 8002764:	42a0      	cmp	r0, r4
 8002766:	d0e3      	beq.n	8002730 <_malloc_r+0x64>
 8002768:	1a21      	subs	r1, r4, r0
 800276a:	4630      	mov	r0, r6
 800276c:	f000 f808 	bl	8002780 <_sbrk_r>
 8002770:	3001      	adds	r0, #1
 8002772:	d1dd      	bne.n	8002730 <_malloc_r+0x64>
 8002774:	e7cf      	b.n	8002716 <_malloc_r+0x4a>
 8002776:	bf00      	nop
 8002778:	20000098 	.word	0x20000098
 800277c:	2000009c 	.word	0x2000009c

08002780 <_sbrk_r>:
 8002780:	b538      	push	{r3, r4, r5, lr}
 8002782:	4d06      	ldr	r5, [pc, #24]	; (800279c <_sbrk_r+0x1c>)
 8002784:	2300      	movs	r3, #0
 8002786:	4604      	mov	r4, r0
 8002788:	4608      	mov	r0, r1
 800278a:	602b      	str	r3, [r5, #0]
 800278c:	f7fe fc38 	bl	8001000 <_sbrk>
 8002790:	1c43      	adds	r3, r0, #1
 8002792:	d102      	bne.n	800279a <_sbrk_r+0x1a>
 8002794:	682b      	ldr	r3, [r5, #0]
 8002796:	b103      	cbz	r3, 800279a <_sbrk_r+0x1a>
 8002798:	6023      	str	r3, [r4, #0]
 800279a:	bd38      	pop	{r3, r4, r5, pc}
 800279c:	200000a8 	.word	0x200000a8

080027a0 <__malloc_lock>:
 80027a0:	4801      	ldr	r0, [pc, #4]	; (80027a8 <__malloc_lock+0x8>)
 80027a2:	f000 b809 	b.w	80027b8 <__retarget_lock_acquire_recursive>
 80027a6:	bf00      	nop
 80027a8:	200000b0 	.word	0x200000b0

080027ac <__malloc_unlock>:
 80027ac:	4801      	ldr	r0, [pc, #4]	; (80027b4 <__malloc_unlock+0x8>)
 80027ae:	f000 b804 	b.w	80027ba <__retarget_lock_release_recursive>
 80027b2:	bf00      	nop
 80027b4:	200000b0 	.word	0x200000b0

080027b8 <__retarget_lock_acquire_recursive>:
 80027b8:	4770      	bx	lr

080027ba <__retarget_lock_release_recursive>:
 80027ba:	4770      	bx	lr

080027bc <_init>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	bf00      	nop
 80027c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c2:	bc08      	pop	{r3}
 80027c4:	469e      	mov	lr, r3
 80027c6:	4770      	bx	lr

080027c8 <_fini>:
 80027c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ca:	bf00      	nop
 80027cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ce:	bc08      	pop	{r3}
 80027d0:	469e      	mov	lr, r3
 80027d2:	4770      	bx	lr
